{"version":3,"sources":["redux/alert/alertTypes.ts","redux/alert/alertActions.ts","redux/movie/movieActions.ts","redux/movie/movieTypes.ts","redux/review/reviewActions.ts","redux/review/reviewTypes.ts","redux/user/userActions.ts","components/LoginRegisterContainer/index.tsx","redux/user/userTypes.ts","components/BackButton/index.tsx","components/ReviewContainer/index.tsx","components/UserReview/index.tsx","components/MoviePage/index.tsx","redux/search/searchActions.ts","redux/search/searchTypes.ts","components/PageContainer/index.tsx","components/ReviewPage/index.tsx","components/FilterDialog/index.tsx","redux/filter/filterActions.ts","redux/filter/filterTypes.ts","components/SortSelect/index.tsx","redux/sort/sortActions.ts","redux/sort/sortTypes.ts","components/SearchBar/index.tsx","components/MovieContainer/index.tsx","components/SearchResults/index.tsx","components/UserPage/index.tsx","components/SwitchContainer/index.tsx","components/CustomSnackbar/index.tsx","App.tsx","serviceWorker.ts","redux/search/searchReducer.ts","redux/filter/filterReducer.ts","redux/sort/sortReducer.ts","redux/movie/movieReducer.ts","redux/user/userReducer.ts","redux/review/reviewReducer.ts","redux/alert/alertReducer.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["setAlert","alert","type","payload","fetchMovie","id","dispatch","Axios","get","apiDomain","then","response","movie","data","averageRating","console","log","fetchMovieSuccess","fetchReviews","catch","errorMsg","message","defaults","adapter","require","getConfig","token","headers","Authorization","reviews","error","fetchReviewsFailure","fetchReview","fetchReviewFailure","connector","connect","state","userInfo","loginUser","username","password","post","userObject","userID","expires","userLoginSuccess","userLoginFailure","registerUser","userRegisterSuccess","userRegisterFailure","Copyright","Typography","variant","color","align","Link","Date","getFullYear","useStyles","makeStyles","theme","paper","display","flexDirection","alignItems","borderRadius","padding","avatar","margin","spacing","backgroundColor","palette","secondary","main","form","width","marginTop","submit","props","history","useHistory","classes","React","useState","setUsername","setPassword","useEffect","loggedIn","localStorage","getItem","setItem","JSON","stringify","user","replace","Grid","item","xs","sm","md","component","Paper","elevation","className","Avatar","onSubmit","event","preventDefault","handleSubmit","TextField","data-testid","inputProps","required","fullWidth","label","name","autoComplete","autoFocus","value","onChange","target","Button","container","onClick","Box","mt","BackButton","startIcon","ArrowBack","goBack","movieInfo","reviewInfo","reviewBoxes","setReviewBoxes","updateReviewElements","useCallback","newReviews","review","push","key","_id","bgcolor","href","movieID","movieTitle","IconButton","size","OpenInNew","Rating","rating","readOnly","text","length","postReview","postReviewFailure","setRating","setText","userReview","find","undefined","aria-required","_","multiline","useParams","dateString","parse","release_date","toDateString","loading","title","Divider","src","poster_path","alt","desc","duration","genre","join","budget","updateCurrentPage","page","searchData","search","window","innerWidth","setWidth","addEventListener","Pagination","shape","count","totalPages","currentPage","deleteReview","delete","deleteReviewFailure","updateReview","updatedReview","put","updateReviewFailure","warningButton","warning","dark","errorButton","viewingReview","reviewID","userIsWriter","editing","setEditing","Check","Close","Edit","Delete","confirm","filterData","filter","setFilters","filterObject","closeFilterDialog","genres","filters","selectedGenres","setSelectedGenres","genreButtons","setGenreButtons","gt","lt","Infinity","durationObject","setDurationObject","budgetObject","setBudgetObject","toggleGenre","includes","newGenres","g","updateGenreButtons","newButtons","forEach","i","button","handleClose","createFilterObject","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","InputProps","min","parseInt","DialogActions","sortData","sort","setSortTypeTitle","setSortTypeDuration","setSortTypeBudget","setSortDirectionAscending","setSortDirectionDescending","descending","FormControl","InputLabel","Select","defaultValue","MenuItem","ArrowDownward","ArrowUpward","updateSearchQuery","query","openFilterDialog","setTimeout","timer","setTimer","setValue","triggerChange","firstUpdate","useRef","current","clearTimeout","onKeyDown","MovieContainer","boxShadow","posterPath","fetchResults","params","paramsSerializer","qs","movies","fetchResultsFailure","createConfig","q","results","map","result","fetchUser","viewingUser","fetchUserSuccess","fetchUserFailure","userLogout","deleteUser","deleteUserFailure","myUser","ExitToApp","SwitchContainer","exact","path","alertInfo","closeAlert","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","resetSearch","resetFilters","darkMode","setDarkMode","primaryColors","light","lightTheme","createMuiTheme","primary","success","darkTheme","useMemo","appBar","AppBar","position","Toolbar","Brightness5","Brightness7","Boolean","location","hostname","match","initialState","searchReducer","action","filterReducer","sortReducer","movieReducer","userInStorage","currentTime","getTime","removeItem","getStateFromCookies","userReducer","reviewReducer","alertReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddc07133.chunk.js","sourcesContent":["/*\n\nThis file creates the necessary types for Alert actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported.\n\nAlso creates an interface for AlertInfo state.\n\n*/\n\nexport const SET_ALERT = \"SET_ALERT\";\nexport const CLOSE_ALERT = \"CLOSE_ALERT\";\n\nexport interface Alert {\n  type: \"error\" | \"warning\" | \"info\" | \"success\";\n  message: string;\n}\n\nexport interface AlertInfo {\n  open: boolean;\n  alert: Alert;\n}\n\ninterface SetAlertAction {\n  type: typeof SET_ALERT;\n  payload: Alert;\n}\n\ninterface CloseAlertAction {\n  type: typeof CLOSE_ALERT;\n}\n\nexport type AlertActionTypes = SetAlertAction | CloseAlertAction;\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport { Alert, AlertActionTypes, CLOSE_ALERT, SET_ALERT } from \"./alertTypes\";\n\nexport const setAlert = (alert: Alert): AlertActionTypes => {\n  return {\n    type: SET_ALERT,\n    payload: alert,\n  };\n};\n\nexport const closeAlert = (): AlertActionTypes => {\n  return {\n    type: CLOSE_ALERT,\n  };\n};\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport {\n  FETCH_MOVIE_REQUEST,\n  FETCH_MOVIE_SUCCESS,\n  FETCH_MOVIE_FAILURE,\n  Movie,\n  MovieActionTypes,\n} from \"./movieTypes\";\nimport Axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { fetchReviews } from \"../review/reviewActions\";\nimport { setAlert } from \"../alert/alertActions\";\nimport { apiDomain } from \"../../config/api\";\n\nconst fetchMovieRequest = (): MovieActionTypes => {\n  return {\n    type: FETCH_MOVIE_REQUEST,\n  };\n};\n\nconst fetchMovieSuccess = (movie: Movie): MovieActionTypes => {\n  return {\n    type: FETCH_MOVIE_SUCCESS,\n    payload: movie,\n  };\n};\n\nconst fetchMovieFailure = (error: string): MovieActionTypes => {\n  return {\n    type: FETCH_MOVIE_FAILURE,\n    payload: error,\n  };\n};\n\n// Async action to fetch a movie on id.\nexport const fetchMovie = (id: string) => {\n  return (dispatch: Dispatch) => {\n    // First, dispatch a fetchMovieRequest\n    dispatch(fetchMovieRequest());\n    // Then, try to get on /movie/id/ + the id of the movie to get.\n    Axios.get(apiDomain() + \"/movie/\" + id)\n      .then((response) => {\n        // If it works, extract the movie from the response, dispatch MovieSuccess with the movie as input\n        let movie = response.data.movie;\n        movie.averageRating = response.data.averageRating;\n        console.log(response);\n        dispatch(fetchMovieSuccess(movie));\n        dispatch(fetchReviews(\"movie\", id) as any);\n      })\n      .catch((response) => {\n        // If it fails, dispatch MovieFailure, with the errorMsg extracted from the response.\n        const errorMsg = response.message;\n        dispatch(setAlert({ type: \"error\", message: \"Could not fetch movie\" }));\n        dispatch(fetchMovieFailure(errorMsg));\n      });\n  };\n};\n","/*\n\nThis file creates the necessary types for Movie info actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported .\n\nAlso reates an interface for MovieInfo state.\n\n*/\n\nexport const OPEN_MOVIE_DIALOG = \"OPEN_MOVIE_DIALOG\";\nexport const CLOSE_MOVIE_DIALOG = \"CLOSE_MOVIE_DIALOG\";\n\nexport const FETCH_MOVIE_REQUEST = \"FETCH_MOVIE_REQUEST\";\nexport const FETCH_MOVIE_SUCCESS = \"FETCH_MOVIE_SUCCESS\";\nexport const FETCH_MOVIE_FAILURE = \"FETCH_MOVIE_FAILURE\";\n\nexport const PUT_RATINGS_REQUEST = \"PUT_RATINGS_REQUEST\";\nexport const PUT_RATINGS_SUCCESS = \"PUT_RATINGS_SUCCESS\";\nexport const PUT_RATINGS_FAILURE = \"PUT_RATINGS_FAILURE\";\n\ninterface FetchMovieRequestAction {\n  type: typeof FETCH_MOVIE_REQUEST;\n}\ninterface FetchMovieSuccessAction {\n  type: typeof FETCH_MOVIE_SUCCESS;\n  payload: Movie;\n}\ninterface FetchMovieFailureAction {\n  type: typeof FETCH_MOVIE_FAILURE;\n  payload: string;\n}\n\nexport interface Movie {\n  genre: Array<string>;\n  reviews: Array<string>;\n  _id: string;\n  title: string;\n  poster_path: string;\n  desc: string;\n  budget: number;\n  release_date: string;\n  duration: number;\n  averageRating: number;\n}\n\nexport interface MovieInfo {\n  loading: boolean;\n  error: string;\n  movie: Movie;\n}\n\nexport type MovieActionTypes =\n  | FetchMovieFailureAction\n  | FetchMovieRequestAction\n  | FetchMovieSuccessAction;\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport Axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { apiDomain } from \"../../config/api\";\nimport { setAlert } from \"../alert/alertActions\";\nimport { fetchMovie } from \"../movie/movieActions\";\nimport {\n  DELETE_REVIEW_FAILURE,\n  DELETE_REVIEW_REQUEST,\n  DELETE_REVIEW_SUCCESS,\n  POST_REVIEW_FAILURE,\n  POST_REVIEW_REQUEST,\n  POST_REVIEW_SUCCESS,\n  ReviewActionTypes,\n  Review,\n  UPDATE_REVIEW_FAILURE,\n  UPDATE_REVIEW_REQUEST,\n  UPDATE_REVIEW_SUCCESS,\n  FETCH_REVIEWS_FAILURE,\n  FETCH_REVIEWS_REQUEST,\n  FETCH_REVIEWS_SUCCESS,\n  RecievedReview,\n  FETCH_REVIEW_FAILURE,\n  FETCH_REVIEW_REQUEST,\n  FETCH_REVIEW_SUCCESS,\n} from \"./reviewTypes\";\n\nAxios.defaults.adapter = require(\"axios/lib/adapters/http\");\n\nconst postReviewRequest = (): ReviewActionTypes => {\n  return {\n    type: POST_REVIEW_REQUEST,\n  };\n};\n\nconst postReviewSuccess = (): ReviewActionTypes => {\n  return {\n    type: POST_REVIEW_SUCCESS,\n  };\n};\n\nconst postReviewFailure = (error: string): ReviewActionTypes => {\n  return {\n    type: POST_REVIEW_FAILURE,\n    error: error,\n  };\n};\n\nconst updateReviewRequest = (): ReviewActionTypes => {\n  return {\n    type: UPDATE_REVIEW_REQUEST,\n  };\n};\n\nconst updateReviewSuccess = (): ReviewActionTypes => {\n  return {\n    type: UPDATE_REVIEW_SUCCESS,\n  };\n};\n\nconst updateReviewFailure = (error: string): ReviewActionTypes => {\n  return {\n    type: UPDATE_REVIEW_FAILURE,\n    error: error,\n  };\n};\n\nconst deleteReviewRequest = (): ReviewActionTypes => {\n  return {\n    type: DELETE_REVIEW_REQUEST,\n  };\n};\n\nconst deleteReviewSuccess = (): ReviewActionTypes => {\n  return {\n    type: DELETE_REVIEW_SUCCESS,\n  };\n};\n\nconst deleteReviewFailure = (error: string): ReviewActionTypes => {\n  return {\n    type: DELETE_REVIEW_FAILURE,\n    error: error,\n  };\n};\n\nconst fetchReviewsRequest = (): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEWS_REQUEST,\n  };\n};\n\nconst fetchReviewsSuccess = (reviews: Array<any>): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEWS_SUCCESS,\n    payload: reviews,\n  };\n};\n\nconst fetchReviewsFailure = (error: string): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEWS_FAILURE,\n    error: error,\n  };\n};\n\nconst fetchReviewRequest = (): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEW_REQUEST,\n  };\n};\n\nconst fetchReviewSuccess = (review: RecievedReview): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEW_SUCCESS,\n    payload: review,\n  };\n};\n\nconst fetchReviewFailure = (error: string): ReviewActionTypes => {\n  return {\n    type: FETCH_REVIEW_FAILURE,\n    error: error,\n  };\n};\n\nconst getConfig = (token: string) => {\n  return {\n    headers: { Authorization: token },\n  };\n};\n\n// Async action that uses axios to post review.\nexport const postReview = (review: Review, token: string) => {\n  // Takes in review object and token\n  return (dispatch: Dispatch) => {\n    // First dispatch postReviewRequest\n    dispatch(postReviewRequest());\n    // Then try to post review with axios. Sends the review object with a config object with the token.\n    return Axios.post(apiDomain() + \"/review/\", review, getConfig(token))\n      .then((response) => {\n        // If it works\n        // Dispatch postReviewSuccess\n        dispatch(postReviewSuccess());\n        // Dispatch fetchMovie so the movie in state is up to date.\n        dispatch(fetchMovie(review.movieID) as any);\n        // Set a success alert with fitting message\n        dispatch(\n          setAlert({ type: \"success\", message: \"Successfully posted review!\" })\n        );\n      })\n      .catch((error) => {\n        // If it fails, dispatch postReviewFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(postReviewFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(setAlert({ type: \"error\", message: \"Could not post review\" }));\n      });\n  };\n};\n\n// Async action that uses axios to update review.\nexport const updateReview = (review: Review, id: string, token: string) => {\n  // Takes in review object, id to put on, and token\n  return (dispatch: Dispatch) => {\n    // First dispatch updateReviewRequest\n    dispatch(updateReviewRequest());\n    // Declare the updatedReview\n    const updatedReview = {\n      rating: review.rating,\n      text: review.text,\n      movieID: review.movieID,\n    };\n    // Put on correct path with updatedReview and configobject with token.\n    return Axios.put(\n      apiDomain() + \"/review/\" + id,\n      updatedReview,\n      getConfig(token)\n    )\n      .then((response) => {\n        // If it works, dispatch updateReviewSuccess\n        dispatch(updateReviewSuccess());\n        // Disaptch success alert\n        dispatch(\n          setAlert({ type: \"success\", message: \"Successfully updated review!\" })\n        );\n        // Dispatch fetchReview on id so that the review in the state is updated\n        dispatch(fetchReview(id) as any);\n      })\n      .catch((error) => {\n        // If it fails, dispatch updateReviewFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(updateReviewFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({ type: \"error\", message: \"Could not update review\" })\n        );\n      });\n  };\n};\n\n// Async action that uses axios to delete review.\nexport const deleteReview = (id: string, token: string) => {\n  // Takes in id of review and token\n  return (dispatch: Dispatch) => {\n    // First, dispatch deleteReviewRequest\n    dispatch(deleteReviewRequest());\n    // Then try to delete on path with config object of token.\n    return Axios.delete(apiDomain() + \"/review/\" + id, getConfig(token))\n      .then((response) => {\n        // If it works, dispatch deleteReviewSuccess\n        dispatch(deleteReviewSuccess());\n        // Dispatch success alert with message\n        dispatch(\n          setAlert({ type: \"success\", message: \"Successfully deleted review!\" })\n        );\n      })\n      .catch((error) => {\n        // If it fails, dispatch deleteReviewFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(deleteReviewFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({ type: \"error\", message: \"Could not delete review\" })\n        );\n      });\n  };\n};\n\n// Async action that uses axios to delete review.\nexport const fetchReviews = (type: \"movie\" | \"user\", id: string) => {\n  // Takes in type of either movie or user and id\n  return (dispatch: Dispatch) => {\n    // First, dispatch fetchReviewsRequest\n    dispatch(fetchReviewsRequest());\n    return Axios.get(apiDomain() + \"/\" + type + \"/\" + id + \"/reviews/\")\n      .then((response) => {\n        // If it works, dispatch fetchReviewsSuccess with the reviews in data in the response\n        dispatch(fetchReviewsSuccess(response.data.reviews));\n      })\n      .catch((error) => {\n        const errorMsg = error.message;\n        // If it fails, dispatch fetchReviewsFailure, with the errorMsg extracted from the response.\n        dispatch(fetchReviewsFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({ type: \"error\", message: \"Could not fetch reviews\" })\n        );\n      });\n  };\n};\n\n// Async action that uses axios to fetch a single review.\nexport const fetchReview = (id: string) => {\n  // Takes in id of review\n  return (dispatch: Dispatch) => {\n    // First dispatch fetchReviewRequest\n    dispatch(fetchReviewRequest());\n    // Then try to get on correct path\n    return Axios.get(apiDomain() + \"/review/\" + id)\n      .then((response) => {\n        // If it works, dispatch fetchReviewSuccess with the data of the response\n        dispatch(fetchReviewSuccess(response.data));\n      })\n      .catch((error) => {\n        // If it fails, dispatch fetchReviewFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(fetchReviewFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({ type: \"error\", message: \"Could not fetch review\" })\n        );\n      });\n  };\n};\n","/*\n\nThis file creates the necessary types for Review actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported .\n\nAlso creates an interface for Review state.\n\n*/\n\nexport const POST_REVIEW_REQUEST = \"POST_REVIEW_REQUEST\";\nexport const POST_REVIEW_SUCCESS = \"POST_REVIEW_SUCCESS\";\nexport const POST_REVIEW_FAILURE = \"POST_REVIEW_FAILURE\";\n\nexport const UPDATE_REVIEW_REQUEST = \"UPDATE_REVIEW_REQUEST\";\nexport const UPDATE_REVIEW_SUCCESS = \"UPDATE_REVIEW_SUCCESS\";\nexport const UPDATE_REVIEW_FAILURE = \"UPDATE_REVIEW_FAILURE\";\n\nexport const DELETE_REVIEW_REQUEST = \"DELETE_REVIEW_REQUEST\";\nexport const DELETE_REVIEW_SUCCESS = \"DELETE_REVIEW_SUCCESS\";\nexport const DELETE_REVIEW_FAILURE = \"DELETE_REVIEW_FAILURE\";\n\nexport const FETCH_REVIEWS_REQUEST = \"FETCH_REVIEWS_REQUEST\";\nexport const FETCH_REVIEWS_SUCCESS = \"FETCH_REVIEWS_SUCCESS\";\nexport const FETCH_REVIEWS_FAILURE = \"FETCH_REVIEWS_FAILURE\";\n\nexport const FETCH_REVIEW_REQUEST = \"FETCH_REVIEW_REQUEST\";\nexport const FETCH_REVIEW_SUCCESS = \"FETCH_REVIEW_SUCCESS\";\nexport const FETCH_REVIEW_FAILURE = \"FETCH_REVIEW_FAILURE\";\n\nexport interface ReviewInfo {\n  loading: boolean;\n  error: string;\n  reviews: Array<RecievedReview>;\n  viewingReview: RecievedReview;\n}\n\nexport interface RecievedReview {\n  _id: string;\n  rating: number;\n  text: string;\n  movieID: string;\n  userID: string;\n  username: string;\n  movieTitle: string;\n}\n\nexport interface Review {\n  rating: number;\n  text: string;\n  movieID: string;\n}\n\ninterface PostReviewRequestAction {\n  type: typeof POST_REVIEW_REQUEST;\n}\n\ninterface PostReviewSuccessAction {\n  type: typeof POST_REVIEW_SUCCESS;\n}\n\ninterface PostReviewFailureAction {\n  type: typeof POST_REVIEW_FAILURE;\n  error: string;\n}\n\ninterface UpdateReviewRequestAction {\n  type: typeof UPDATE_REVIEW_REQUEST;\n}\n\ninterface UpdateReviewSuccessAction {\n  type: typeof UPDATE_REVIEW_SUCCESS;\n}\n\ninterface UpdateReviewFailureAction {\n  type: typeof UPDATE_REVIEW_FAILURE;\n  error: string;\n}\n\ninterface DeleteReviewRequestAction {\n  type: typeof DELETE_REVIEW_REQUEST;\n}\n\ninterface DeleteReviewSuccessAction {\n  type: typeof DELETE_REVIEW_SUCCESS;\n}\n\ninterface DeleteReviewFailureAction {\n  type: typeof DELETE_REVIEW_FAILURE;\n  error: string;\n}\n\ninterface FetchReviewsRequestAction {\n  type: typeof FETCH_REVIEWS_REQUEST;\n}\n\ninterface FetchReviewsSuccessAction {\n  type: typeof FETCH_REVIEWS_SUCCESS;\n  payload: Array<RecievedReview>;\n}\n\ninterface FetchReviewsFailureAction {\n  type: typeof FETCH_REVIEWS_FAILURE;\n  error: string;\n}\n\ninterface FetchReviewRequestAction {\n  type: typeof FETCH_REVIEW_REQUEST;\n}\n\ninterface FetchReviewSuccessAction {\n  type: typeof FETCH_REVIEW_SUCCESS;\n  payload: RecievedReview;\n}\n\ninterface FetchReviewFailureAction {\n  type: typeof FETCH_REVIEW_FAILURE;\n  error: string;\n}\n\nexport type ReviewActionTypes =\n  | PostReviewRequestAction\n  | PostReviewSuccessAction\n  | PostReviewFailureAction\n  | UpdateReviewRequestAction\n  | UpdateReviewSuccessAction\n  | UpdateReviewFailureAction\n  | DeleteReviewRequestAction\n  | DeleteReviewSuccessAction\n  | DeleteReviewFailureAction\n  | FetchReviewsRequestAction\n  | FetchReviewsSuccessAction\n  | FetchReviewsFailureAction\n  | FetchReviewRequestAction\n  | FetchReviewSuccessAction\n  | FetchReviewFailureAction;\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport Axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { apiDomain } from \"../../config/api\";\nimport { setAlert } from \"../alert/alertActions\";\nimport { fetchReviews } from \"../review/reviewActions\";\nimport {\n  DELETE_USER_FAILURE,\n  DELETE_USER_REQUEST,\n  DELETE_USER_SUCCESS,\n  FETCH_USER_FAILURE,\n  FETCH_USER_REQUEST,\n  FETCH_USER_SUCCESS,\n  UserActionTypes,\n  UserObject,\n  USER_LOGIN_FAILURE,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAILURE,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  ViewingUser,\n} from \"./userTypes\";\n\nAxios.defaults.adapter = require(\"axios/lib/adapters/http\");\n\nconst userLoginRequest = (): UserActionTypes => {\n  return {\n    type: USER_LOGIN_REQUEST,\n  };\n};\n\nconst userLoginSuccess = (userObject: UserObject): UserActionTypes => {\n  return {\n    type: USER_LOGIN_SUCCESS,\n    payload: userObject,\n  };\n};\n\nconst userLoginFailure = (error: string): UserActionTypes => {\n  return {\n    type: USER_LOGIN_FAILURE,\n    payload: error,\n  };\n};\n\nconst userRegisterRequest = (): UserActionTypes => {\n  return {\n    type: USER_REGISTER_REQUEST,\n  };\n};\n\nconst userRegisterSuccess = (userObject: UserObject): UserActionTypes => {\n  return {\n    type: USER_REGISTER_SUCCESS,\n    payload: userObject,\n  };\n};\n\nconst userRegisterFailure = (error: string): UserActionTypes => {\n  return {\n    type: USER_REGISTER_FAILURE,\n    payload: error,\n  };\n};\n\nconst fetchUserRequest = (): UserActionTypes => {\n  return {\n    type: FETCH_USER_REQUEST,\n  };\n};\n\nconst fetchUserSuccess = (viewingUser: ViewingUser): UserActionTypes => {\n  return {\n    type: FETCH_USER_SUCCESS,\n    payload: viewingUser,\n  };\n};\n\nconst fetchUserFailure = (error: string): UserActionTypes => {\n  return {\n    type: FETCH_USER_FAILURE,\n    payload: error,\n  };\n};\n\nconst deleteUserRequest = (id: string): UserActionTypes => {\n  return {\n    type: DELETE_USER_REQUEST,\n    payload: id,\n  };\n};\n\nconst deleteUserSuccess = (): UserActionTypes => {\n  return {\n    type: DELETE_USER_SUCCESS,\n  };\n};\n\nconst deleteUserFailure = (error: string): UserActionTypes => {\n  return {\n    type: DELETE_USER_FAILURE,\n    payload: error,\n  };\n};\n\nexport const userLogout = (): UserActionTypes => {\n  return {\n    type: USER_LOGOUT,\n  };\n};\n\nconst getConfig = (token: string) => {\n  return {\n    headers: { Authorization: token },\n  };\n};\n\n// Async action that uses axios to login user.\nexport const loginUser = (username: string, password: string) => {\n  // Takes in username and password\n  return (dispatch: Dispatch) => {\n    // First dispatch userLoginRequest\n    dispatch(userLoginRequest());\n    // Then try to post user with axios. Sends the user object.\n    return Axios.post(apiDomain() + \"/user/login\", {\n      username: username,\n      password: password,\n    })\n      .then((response) => {\n        // If it works\n        // Dispatch userLoginSuccess with correct userObject based on response\n        const userObject: UserObject = {\n          username: response.data.username,\n          userID: response.data.userID,\n          token: response.data.token,\n          expires: response.data.expires,\n        };\n        dispatch(userLoginSuccess(userObject));\n        // Set a success alert with fitting message\n        dispatch(\n          setAlert({ type: \"success\", message: \"Successfully logged in!\" })\n        );\n      })\n      .catch((error) => {\n        // If it fails, dispatch userLoginFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(userLoginFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({ type: \"error\", message: \"Wrong username or password\" })\n        );\n      });\n  };\n};\n\n// Async action that uses axios to register user.\nexport const registerUser = (username: string, password: string) => {\n  // Takes in username and password\n  return (dispatch: Dispatch) => {\n    // First dispatch userRegisterRequest\n    dispatch(userRegisterRequest());\n    // Then try to post user with axios. Sends the user object.\n    return Axios.post(apiDomain() + \"/user/register\", {\n      username: username,\n      password: password,\n    })\n      .then((response) => {\n        // If it works\n        // Dispatch userRegisterSuccess with correct userObject based on response\n        const userObject: UserObject = {\n          username: response.data.username,\n          userID: response.data.userID,\n          token: response.data.token,\n          expires: response.data.expires,\n        };\n        dispatch(userRegisterSuccess(userObject));\n        // Set a success alert with fitting message\n        dispatch(\n          setAlert({\n            type: \"success\",\n            message: \"Successfully registered user!\",\n          })\n        );\n      })\n      .catch((error) => {\n        // If it fails, dispatch userRegisterFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(userRegisterFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({\n            type: \"error\",\n            message: \"Could not register user. Username might be taken\",\n          })\n        );\n      });\n  };\n};\n\n// Async action that uses axios to fetch user.\nexport const fetchUser = (userID: string) => {\n  // Takes in userID\n  return (dispatch: Dispatch) => {\n    // First dispatch fetchUserRequest\n    dispatch(fetchUserRequest());\n    // Then try to get user with axios.\n    return Axios.get(apiDomain() + \"/user/\" + userID)\n      .then((response) => {\n        // If it works\n        // Dispatch fetchUserSuccess with correct viewingUser based on response\n        const viewingUser: ViewingUser = {\n          username: response.data.username,\n          userID: response.data._id,\n          reviews: response.data.reviews,\n        };\n        dispatch(fetchUserSuccess(viewingUser));\n        // Dispatch fetchReviews such that the review state is updated with the users reviews.\n        dispatch(fetchReviews(\"user\", viewingUser.userID) as any);\n      })\n      .catch((error) => {\n        // If it fails, dispatch fetchUserFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(fetchUserFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(setAlert({ type: \"error\", message: \"Could not fetch user\" }));\n      });\n  };\n};\n\n// Async action that uses axios to login user.\nexport const deleteUser = (userID: string, token: string) => {\n  // Takes in userID and token\n  return (dispatch: Dispatch) => {\n    // First dispatch deleteUserRequest with userID\n    dispatch(deleteUserRequest(userID));\n    // Then try to delete user with axios. Sends the config object with token.\n    return Axios.delete(apiDomain() + \"/user/\" + userID, getConfig(token))\n      .then((response) => {\n        // If it works\n        // Dispatch deleteUserSuccess\n        dispatch(deleteUserSuccess());\n        // Dispatch userLogout\n        dispatch(userLogout());\n        // Set a success alert with fitting message\n        dispatch(\n          setAlert({ type: \"success\", message: \"User successfully deleted!\" })\n        );\n      })\n      .catch((error) => {\n        // If it fails, dispatch deleteUserFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(deleteUserFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(setAlert({ type: \"error\", message: \"Could not delete user\" }));\n      });\n  };\n};\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./style.css\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { useHistory } from \"react-router-dom\";\nimport { loginUser, registerUser } from \"../../redux/user/userActions\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    loginUser: (username: string, password: string) =>\n      dispatch(loginUser(username, password)),\n    registerUser: (username: string, password: string) =>\n      dispatch(registerUser(username, password)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\n// Takes in prop \"type\" from parent. Determines if the Container is supposed to login or register user\ntype Props = PropsFromRedux & {\n  type: \"login\" | \"register\";\n};\n\n// Function for returning a fancy copyright declaration.\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\">AMDb</Link> {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\n// Use makeStyles from MUI to overwrite the styling of MUI components\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    borderRadius: \"20px\",\n    padding: \"10px\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"80%\",\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst LoginRegisterContainer: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  // Make the classes from useStyles.\n  const classes = useStyles();\n\n  // Gets relevant state from props.\n  const type = props.type;\n  const userInfo = props.userInfo;\n\n  // Creates username and password in the component state.\n  // Used for storing the current input in username and password textfields and for submitting.\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n\n  // Function that runs when submit button is pressed.\n  // Varies based on the type prop.\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (type === \"login\") {\n      props.loginUser(username, password);\n    } else {\n      props.registerUser(username, password);\n    }\n  };\n\n  // Function that runs when the link/register link is clicked.\n  // Varies based on the type prop.\n  const handleLinkClick = () => {\n    type === \"login\" ? history.replace(\"/register\") : history.replace(\"/login\");\n  };\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes.\n  // If the user is logged in and the user is not set in localstorage, set the user in localstorage\n  React.useEffect(() => {\n    if (userInfo.loggedIn && localStorage.getItem(\"currentUser\") === null) {\n      localStorage.setItem(\"currentUser\", JSON.stringify(userInfo.user));\n    }\n  }, [userInfo.loggedIn, userInfo.user]);\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes.\n  // If the user is logged in, redirect to the users page.\n  React.useEffect(() => {\n    if (userInfo.loggedIn) {\n      history.replace(\"/user/\" + userInfo.user.userID);\n    }\n  }, [userInfo.loggedIn, userInfo.user.userID, history]);\n\n  return (\n    // MUI, grid for responsive design\n    <Grid\n      item\n      xs={12}\n      sm={8}\n      md={5}\n      component={Paper}\n      elevation={6}\n      id=\"paperContainer\"\n    >\n      <div className={classes.paper}>\n        {/* Avatar icon */}\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        {/* Title based on type prop */}\n        <Typography component=\"h1\" variant=\"h5\">\n          {type === \"login\" ? \"Sign in\" : \"Register\"}\n        </Typography>\n        {/* Form for login info. Runs handle submit when submitted */}\n        <form\n          className={classes.form}\n          onSubmit={(event) => handleSubmit(event)}\n        >\n          {/* Textfield for username. Value based on state. Updates state with new value when changed. */}\n          <TextField\n            data-testid=\"username1\"\n            inputProps={{ \"data-testid\": \"username_input\" }}\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n            autoFocus\n            value={username}\n            onChange={(event) => setUsername(event.target.value)}\n          />\n          {/* Textfield for password. Value based on state. Updates state with new value when changed. */}\n          <TextField\n            data-testid=\"password\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          {/* Submit button. Makes the form run onSubmit. Text based on type prop */}\n          <Button\n            data-testid=\"submit\"\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            {type === \"login\" ? \"Sign in\" : \"Register\"}\n          </Button>\n          <Grid container>\n            <Grid item>\n              {/* Link from MUI. Runs handleLinkClick when clicked. Text depends on type prop */}\n              <Link onClick={handleLinkClick} variant=\"body2\">\n                {type === \"login\"\n                  ? \"Don't have an account? Register\"\n                  : \"Already have an account? Sign in\"}\n              </Link>\n            </Grid>\n          </Grid>\n          {/* Inserts Copyright declaration */}\n          <Box mt={5}>\n            <Copyright />\n          </Box>\n        </form>\n      </div>\n    </Grid>\n  );\n};\n\nexport default connector(LoginRegisterContainer);\n","export const USER_LOGIN_REQUEST = \"USER_LOGIN_REQUEST\";\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILURE = \"USER_LOGIN_FAILURE\";\n\nexport const USER_REGISTER_REQUEST = \"USER_REGISTER_REQUEST\";\nexport const USER_REGISTER_SUCCESS = \"USER_REGISTER_SUCCESS\";\nexport const USER_REGISTER_FAILURE = \"USER_REGISTER_FAILURE\";\n\nexport const FETCH_USER_REQUEST = \"FETCH_USER_REQUEST\";\nexport const FETCH_USER_SUCCESS = \"FETCH_USER_SUCCESS\";\nexport const FETCH_USER_FAILURE = \"FETCH_USER_FAILURE\";\n\nexport const DELETE_USER_REQUEST = \"DELETE_USER_REQUEST\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\n\nexport const USER_LOGOUT = \"USER_LOGOUT\";\n\nexport interface UserInfo {\n  loggedIn: boolean;\n  loading: boolean;\n  error: string;\n  user: UserObject;\n  viewingUser: ViewingUser;\n}\n\nexport interface ViewingUser {\n  username: string;\n  userID: string;\n  reviews: Array<string>;\n}\n\nexport interface UserObject {\n  username: string;\n  userID: string;\n  token: string;\n  expires: number;\n}\n\ninterface UserLoginRequestAction {\n  type: typeof USER_LOGIN_REQUEST;\n}\n\ninterface UserLoginSuccessAction {\n  type: typeof USER_LOGIN_SUCCESS;\n  payload: UserObject;\n}\n\ninterface UserLoginFailureAction {\n  type: typeof USER_LOGIN_FAILURE;\n  payload: string;\n}\n\ninterface UserRegisterRequestAction {\n  type: typeof USER_REGISTER_REQUEST;\n}\n\ninterface UserRegisterSuccessAction {\n  type: typeof USER_REGISTER_SUCCESS;\n  payload: UserObject;\n}\n\ninterface UserRegisterFailureAction {\n  type: typeof USER_REGISTER_FAILURE;\n  payload: string;\n}\n\ninterface FetchUserRequestAction {\n  type: typeof FETCH_USER_REQUEST;\n}\n\ninterface FetchUserSuccessAction {\n  type: typeof FETCH_USER_SUCCESS;\n  payload: ViewingUser;\n}\n\ninterface FetchUserFailureAction {\n  type: typeof FETCH_USER_FAILURE;\n  payload: string;\n}\n\ninterface DeleteUserRequestAction {\n  type: typeof DELETE_USER_REQUEST;\n  payload: string;\n}\n\ninterface DeleteUserSuccessAction {\n  type: typeof DELETE_USER_SUCCESS;\n}\n\ninterface DeleteUserFailureAction {\n  type: typeof DELETE_USER_FAILURE;\n  payload: string;\n}\n\ninterface UserLogoutAction {\n  type: typeof USER_LOGOUT;\n}\n\nexport type UserActionTypes =\n  | UserLoginRequestAction\n  | UserLoginSuccessAction\n  | UserLoginFailureAction\n  | UserRegisterRequestAction\n  | UserRegisterSuccessAction\n  | UserRegisterFailureAction\n  | FetchUserRequestAction\n  | FetchUserSuccessAction\n  | FetchUserFailureAction\n  | DeleteUserRequestAction\n  | DeleteUserSuccessAction\n  | DeleteUserFailureAction\n  | UserLogoutAction;\n","import { Button } from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst BackButton: React.FunctionComponent = () => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<ArrowBack />}\n        // When clicked, goes back in the history instance.\n        onClick={() => {\n          history.goBack();\n        }}\n      >\n        Back\n      </Button>\n    </>\n  );\n};\n\nexport default BackButton;\n","import { Box, IconButton, Link } from \"@material-ui/core\";\nimport { OpenInNew } from \"@material-ui/icons\";\nimport { Rating } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { fetchReviews } from \"../../redux/review/reviewActions\";\nimport { RecievedReview } from \"../../redux/review/reviewTypes\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    movieInfo: state.movieInfo,\n    reviewInfo: state.reviewInfo,\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    fetchReviews: (type: \"movie\" | \"user\", id: string) =>\n      dispatch(fetchReviews(type, id)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\n// Takes type as prop from parent\ntype Props = PropsFromRedux & {\n  type: \"movie\" | \"user\";\n};\n\nconst ReviewContainer: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  // Extracts relevant state and functions from redux props\n  const type = props.type;\n  const userInfo = props.userInfo;\n  const reviews: Array<RecievedReview> = props.reviewInfo.reviews;\n\n  // Sets a list of React Elements in the state of the component.\n  // Is used for containing all reviewBoxes\n  const [reviewBoxes, setReviewBoxes] = React.useState<React.ReactElement[]>(\n    []\n  );\n\n  // Function for updating the component reviewBoxes state with the relevant reviews\n  const updateReviewElements = React.useCallback(() => {\n    const newReviews: React.ReactElement[] = [];\n    // Iterates over all the reviews in the state\n    for (const review of reviews) {\n      // Only creates a reviewBox when the review is not written by the current user and the type prop is movie\n      if (!(type === \"movie\" && review.userID === userInfo.user.userID)) {\n        // Pushes to newReviews list.\n        newReviews.push(\n          <Box key={review._id} className=\"review\" bgcolor=\"secondary.light\">\n            <div className=\"reviewContent\">\n              <div className=\"reviewTop\">\n                <h3 className=\"noMargin\">\n                  {/* Title depends on type prop */}\n                  {type === \"movie\" ? (\n                    <Link href={\"/user/\" + review.userID}>\n                      {review.username}\n                    </Link>\n                  ) : (\n                    <Link href={\"/movie/\" + review.movieID}>\n                      {review.movieTitle}\n                    </Link>\n                  )}\n                </h3>\n                {/* When clicked opens the corrosponding review */}\n                <IconButton\n                  onClick={() => history.replace(\"/review/\" + review._id)}\n                  size=\"small\"\n                >\n                  <OpenInNew />\n                </IconButton>\n              </div>\n              {/* Rating component from MUI. Cannot be changed */}\n              <Rating value={review.rating} readOnly />\n              {/* Inserts review text */}\n              <span>{review.text}</span>\n            </div>\n          </Box>\n        );\n      }\n    }\n    // Sets the state with the updated reviewBoxes.\n    setReviewBoxes(newReviews);\n  }, [type, history, reviews, userInfo.user.userID]);\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes\n  // When reviews changes, run updateReviewElements\n  React.useEffect(() => {\n    updateReviewElements();\n  }, [reviews, updateReviewElements]);\n\n  return (\n    <div id=\"reviewContainer\">\n      {/* If there are no reviews, display fitting response. Else display reviewBoxes from state */}\n      {reviewBoxes.length > 0 ? reviewBoxes : <p>There are no reviews yet</p>}\n    </div>\n  );\n};\n\nexport default connector(ReviewContainer);\n","import {\n  Box,\n  Button,\n  IconButton,\n  Link,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { OpenInNew } from \"@material-ui/icons\";\nimport { Rating } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { postReview } from \"../../redux/review/reviewActions\";\nimport { Review } from \"../../redux/review/reviewTypes\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    movieInfo: state.movieInfo,\n    reviewInfo: state.reviewInfo,\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    postReview: (review: Review, token: string) =>\n      dispatch(postReview(review, token)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst UserReview: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  // Sets rating and text in the component state\n  const [rating, setRating] = React.useState(1);\n  const [text, setText] = React.useState(\"\");\n\n  // Extracts relevant state from redux props\n  const loggedIn = props.userInfo.loggedIn;\n\n  // Finds the review of the user that is logged in, if it exists.\n  const userReview = props.reviewInfo.reviews.find(\n    (review) => review.userID === props.userInfo.user.userID\n  );\n\n  // function that runs when submit button is pressed. Dispatches the postReview action with the review object and token.\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.postReview(\n      {\n        rating: rating,\n        text: text,\n        movieID: props.movieInfo.movie._id,\n      },\n      props.userInfo.user.token\n    );\n  };\n\n  return (\n    <>\n      <h2>Your review</h2>\n      <Box className=\"review\" bgcolor=\"secondary.light\">\n        <div className=\"reviewContent\">\n          {/* If the user is logged in ... */}\n          {loggedIn ? (\n            // ... and has not written a review\n            userReview === undefined ? (\n              <>\n                {/* Display a form for submitting review */}\n                <h3>Write your review</h3>\n                {/* On submit, run handleSubmit function */}\n                <form onSubmit={(event) => handleSubmit(event)} id=\"reviewForm\">\n                  {/* Rating component from MUI. Value dependent on state, updates state with new value when changed. Cannot be null */}\n                  <Rating\n                    name=\"rating\"\n                    aria-required=\"true\"\n                    value={rating}\n                    onChange={(_, value) => {\n                      setRating(value === null ? 1 : value);\n                    }}\n                  ></Rating>\n                  {/* TextField component from MUI. Value dependent on state, updates state with new value when changed. Cannot be blank */}\n                  <TextField\n                    multiline\n                    variant=\"filled\"\n                    label=\"Your review\"\n                    name=\"text\"\n                    required\n                    value={text}\n                    onChange={(event) => {\n                      setText(event.target.value);\n                    }}\n                  />\n                  {/* Submit button */}\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                    Post review\n                  </Button>\n                </form>\n              </>\n            ) : (\n              // ... and has written a review\n              <>\n                {/* Display the users review */}\n                <div className=\"reviewTop\">\n                  <h3 className=\"noMargin\">{userReview.username}</h3>\n                  {/* When clicked, redirects to review */}\n                  <IconButton\n                    onClick={() => history.replace(\"/review/\" + userReview._id)}\n                    size=\"small\"\n                  >\n                    <OpenInNew />\n                  </IconButton>\n                </div>\n                {/* Displays the rating and text of the review */}\n                <Rating value={userReview.rating} readOnly />\n                <span>{userReview.text}</span>\n              </>\n            )\n          ) : (\n            // If the user is not logged in, encourage user to log in\n            <Typography>\n              <Link href=\"/login\">Login</Link>\n              <span> to write a review</span>\n            </Typography>\n          )}\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default connector(UserReview);\n","import { Divider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { fetchMovie } from \"../../redux/movie/movieActions\";\nimport BackButton from \"../BackButton\";\nimport ReviewContainer from \"../ReviewContainer\";\nimport UserReview from \"../UserReview\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    movieInfo: state.movieInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    fetchMovie: (id: string) => dispatch(fetchMovie(id)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst MoviePage: React.FunctionComponent<Props> = (props) => {\n  // Extracts relevant state and functions from redux props\n  const fetchMovie = props.fetchMovie;\n  const movieInfo = props.movieInfo;\n  const movie = movieInfo.movie;\n\n  // The useParams() hook returns an object of key/value pairs of URL parameters.\n  const { movieID } = useParams<{ movieID: string }>();\n  // Makes a datestring according to the release date of the movie.\n  const dateString = new Date(Date.parse(movie.release_date)).toDateString();\n\n  // useEffect hook triggers everytime id or fetchMovie updates.\n  // fetches movie based on current id in redux state.\n  React.useEffect(() => {\n    fetchMovie(movieID);\n  }, [movieID, fetchMovie]);\n\n  return (\n    <>\n      <BackButton />\n      <div id=\"moviePage\">\n        {/* Title depends on if there is an error or if it is currently loading */}\n        <h1 id=\"title\">\n          {movieInfo.error\n            ? movieInfo.error\n            : movieInfo.loading\n            ? \"Loading...\"\n            : movie.title}\n        </h1>\n        <Divider />\n        {/* If its loading or there is an error or its loading, display nothing */}\n        {movieInfo.loading || movieInfo.error ? (\n          <> </>\n        ) : (\n          <>\n            <div className=\"movieInfo\">\n              {/* Poster of current movie */}\n              <div className=\"contentContainerLeft\">\n                <img\n                  className=\"poster\"\n                  src={movie.poster_path}\n                  alt=\"This is the poster of the movie\"\n                />\n              </div>\n              <div className=\"contentContainerRight\">\n                <div>\n                  <span className=\"infoTitle\">Description: </span>\n                  <br />\n                  {/* Description of current movie */}\n                  <span>{movie.desc}</span>\n                </div>\n                <div>\n                  <span className=\"infoTitle\">Duration: </span>\n                  {/* Duration of current movie. If 0 display N/A */}\n                  <span>\n                    {movie.duration === 0 ? \"N/A\" : movie.duration + \" min\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"infoTitle\">Genre: </span>\n                  {/* Genre of current movie. If length 0, display N/A */}\n                  <span>\n                    {movie.genre.length === 0 ? \"N/A\" : movie.genre.join(\", \")}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"infoTitle\">Release date: </span>\n                  {/* Release date of current movie. If \"Invalid date\", display N/A */}\n                  <span>\n                    {dateString === \"Invalid Date\" ? \"N/A\" : dateString}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"infoTitle\">Budget: </span>\n                  {/* Budget of current movie. If 0, display N/A */}\n                  <span>\n                    {movie.budget === 0 ? \"N/A\" : movie.budget + \" USD\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"infoTitle\">Average rating: </span>\n                  {/* Avarage rating of current movie. Finds the avaragem from the ratings list. */}\n                  <span>\n                    {movie.averageRating === null\n                      ? \"No reviews yet\"\n                      : movie.averageRating}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <Divider />\n            {/* Components for reviews */}\n            <div id=\"reviews\">\n              <UserReview />\n              <h2>Other reviews</h2>\n              <ReviewContainer type=\"movie\" />\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default connector(MoviePage);\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport Axios from \"axios\";\nimport qs from \"qs\";\nimport { Dispatch } from \"redux\";\nimport { apiDomain } from \"../../config/api\";\nimport { ParamsInterface } from \"../../interfaces/ParamsInterface\";\nimport { setAlert } from \"../alert/alertActions\";\nimport {\n  FETCH_RESULTS_FAILURE,\n  FETCH_RESULTS_REQUEST,\n  FETCH_RESULTS_SUCCESS,\n  RESET_SEARCH,\n  SearchActionTypes,\n  UPDATE_CURRENT_PAGE,\n  UPDATE_SEARCH_QUERY,\n  UPDATE_TOTAL_PAGES,\n} from \"./searchTypes\";\n\nconst fetchResultsRequest = (): SearchActionTypes => {\n  return {\n    type: FETCH_RESULTS_REQUEST,\n  };\n};\n\nconst fetchResultsSuccess = (Results: Array<any>): SearchActionTypes => {\n  return {\n    type: FETCH_RESULTS_SUCCESS,\n    payload: Results,\n  };\n};\n\nconst fetchResultsFailure = (error: string): SearchActionTypes => {\n  return {\n    type: FETCH_RESULTS_FAILURE,\n    payload: error,\n  };\n};\n\nexport const updateSearchQuery = (query: string): SearchActionTypes => {\n  return {\n    type: UPDATE_SEARCH_QUERY,\n    payload: query,\n  };\n};\n\nexport const updateTotalPages = (page: number): SearchActionTypes => {\n  return {\n    type: UPDATE_TOTAL_PAGES,\n    payload: page,\n  };\n};\n\nexport const updateCurrentPage = (page: number): SearchActionTypes => {\n  return {\n    type: UPDATE_CURRENT_PAGE,\n    payload: page,\n  };\n};\n\nexport const resetSearch = (): SearchActionTypes => {\n  return {\n    type: RESET_SEARCH,\n  };\n};\n\n// Async action that uses axios to fetch results.\nexport const fetchResults = (params: ParamsInterface) => {\n  // Takes in params on the form of ParamsInterface\n  return (dispatch: Dispatch) => {\n    // First, dispatch a fetchResultsRequest\n    dispatch(fetchResultsRequest());\n    // Then, try to get on /movie with params serialized by qs.\n    Axios.get(apiDomain() + \"/movie\", {\n      params: params,\n      paramsSerializer: (params) => {\n        return qs.stringify(params);\n      },\n    })\n      .then((response) => {\n        // If it works, extract the data from the response, dispatch ResultsSuccess with the movies as input, and dispatch updateTotalPages with the totalPages\n        const data = response.data;\n        dispatch(fetchResultsSuccess(data.movies));\n        dispatch(updateTotalPages(data.totalPages));\n      })\n      .catch((error) => {\n        // If it fails, dispatch ResultsFailure, with the errorMsg extracted from the response.\n        const errorMsg = error.message;\n        dispatch(fetchResultsFailure(errorMsg));\n        // Dispatch setAlert with type error and corresponding message.\n        dispatch(\n          setAlert({\n            type: \"error\",\n            message: \"Something went wrong with your search\",\n          })\n        );\n      });\n  };\n};\n","/*\n\nThis file creates the necessary types for search actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported .\n\nAlso creates an interface for Search state.\n\n*/\n\nexport const FETCH_RESULTS_REQUEST = \"FETCH_RESULTS_REQUEST\";\nexport const FETCH_RESULTS_SUCCESS = \"FETCH_RESULTS_SUCCESS\";\nexport const FETCH_RESULTS_FAILURE = \"FETCH_RESULTS_FAILURE\";\n\nexport const UPDATE_SEARCH_QUERY = \"UDATE_SEARCH_QUERY\";\nexport const UPDATE_TOTAL_PAGES = \"UPDATE_TOTAL_PAGES\";\nexport const UPDATE_CURRENT_PAGE = \"UPDATE_CURRENT_PAGE\";\n\nexport const RESET_SEARCH = \"RESET_SEARCH\";\n\ninterface FetchResultsRequestAction {\n  type: typeof FETCH_RESULTS_REQUEST;\n}\n\ninterface FetchResultsSuccessAction {\n  type: typeof FETCH_RESULTS_SUCCESS;\n  payload: Array<any>;\n}\n\ninterface FetchResultsFailureAction {\n  type: typeof FETCH_RESULTS_FAILURE;\n  payload: string;\n}\n\ninterface UpdateSearchQueryAction {\n  type: typeof UPDATE_SEARCH_QUERY;\n  payload: string;\n}\n\ninterface UpdateTotalPages {\n  type: typeof UPDATE_TOTAL_PAGES;\n  payload: number;\n}\n\ninterface UpdateCurrentPage {\n  type: typeof UPDATE_CURRENT_PAGE;\n  payload: number;\n}\n\ninterface ResetSearchAction {\n  type: typeof RESET_SEARCH;\n}\n\nexport interface Search {\n  loading: Boolean;\n  results: Array<any>;\n  error: string;\n  query: string;\n  totalPages: number;\n  currentPage: number;\n}\n\nexport type SearchActionTypes =\n  | FetchResultsRequestAction\n  | FetchResultsSuccessAction\n  | FetchResultsFailureAction\n  | UpdateSearchQueryAction\n  | UpdateCurrentPage\n  | UpdateTotalPages\n  | ResetSearchAction;\n","import { Pagination } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { updateCurrentPage } from \"../../redux/search/searchActions\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    searchData: state.search,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    updateCurrentPage: (page: number) => dispatch(updateCurrentPage(page)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst PageContainer: React.FunctionComponent<Props> = (props) => {\n  // Extracts necassary action and properties from the redux state.\n  const updateCurrentPage = props.updateCurrentPage;\n\n  // Set the width of the page in the state.\n  const [width, setWidth] = React.useState(window.innerWidth);\n\n  // Sets an eventlistener on the window. When it resizes, it updates the components width state with the current width of the page.\n  window.addEventListener(\"resize\", () => setWidth(window.innerWidth));\n\n  // Function that triggers when any page is clicked. Takes in a ChangeEvent and value. The change event is not used, and the value corresponds to the page number that was clicked.\n  // Updates the current page in the redux state with the page that was clicked.\n  const handleChange = (_: React.ChangeEvent<unknown>, value: number) => {\n    updateCurrentPage(value);\n  };\n\n  return (\n    // Pagination component from MUI. Sets the size according to the window width.\n    // className according to the style state.\n    // count according to the current total pages from redux state.\n    // page according to the current page from redux state.\n    // Triggers handleChange when a new page is clicked.\n    <Pagination\n      color=\"primary\"\n      shape=\"rounded\"\n      size={width <= 430 ? \"small\" : width <= 520 ? \"medium\" : \"large\"}\n      variant=\"text\"\n      className={\"pagination\"}\n      count={props.searchData.totalPages}\n      page={props.searchData.currentPage}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default connector(PageContainer);\n","import {\n  Button,\n  Divider,\n  Link,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport { Check, Close, Delete, Edit } from \"@material-ui/icons\";\nimport { Rating } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport {\n  deleteReview,\n  fetchReview,\n  updateReview,\n} from \"../../redux/review/reviewActions\";\nimport { Review } from \"../../redux/review/reviewTypes\";\nimport BackButton from \"../BackButton\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    reviewInfo: state.reviewInfo,\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    fetchReview: (id: string) => dispatch(fetchReview(id)),\n    deleteReview: (id: string, token: string) =>\n      dispatch(deleteReview(id, token)),\n    updateReview: (review: Review, id: string, token: string) =>\n      dispatch(updateReview(review, id, token)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\n// Use makeStyles from MUI to overwrite the styling of MUI components\nconst useStyles = makeStyles((theme) => ({\n  warningButton: {\n    backgroundColor: theme.palette.warning.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.warning.dark,\n    },\n  },\n  errorButton: {\n    backgroundColor: theme.palette.error.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.error.dark,\n    },\n  },\n}));\n\nconst ReviewPage: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  // Make the classes from useStyles.\n  const classes = useStyles();\n\n  // Extracts relevant state and functions from redux props\n  const viewingReview = props.reviewInfo.viewingReview;\n  const fetchReview = props.fetchReview;\n  const updateReview = props.updateReview;\n  const deleteReview = props.deleteReview;\n\n  // The useParams() hook returns an object of key/value pairs of URL parameters.\n  const { reviewID } = useParams<{ reviewID: string }>();\n\n  // Declares a boolean depending on if the user is the writer of the displayed review\n  const userIsWriter = viewingReview.userID === props.userInfo.user.userID;\n\n  // Sets editing, rating, and text in the component state.\n  const [editing, setEditing] = React.useState(false);\n  const [rating, setRating] = React.useState(viewingReview.rating);\n  const [text, setText] = React.useState(viewingReview.text);\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes\n  // When the rating in the redux state changes, update the component rate state to the rating from redux.\n  // Had to to this because of some problems with the Rating component\n  React.useEffect(() => {\n    setRating(viewingReview.rating);\n  }, [viewingReview.rating]);\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes\n  // When the reviewID from the url changes, fetch the relevant review to redux.\n  React.useEffect(() => {\n    fetchReview(reviewID);\n  }, [reviewID, fetchReview]);\n\n  return (\n    <>\n      <BackButton />\n      <div id=\"reviewPage\">\n        {props.reviewInfo.loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <>\n            <h1>\n              {/* Title depends on the writer of the review and movie title */}\n              <Link href={\"/user/\" + viewingReview.userID}>\n                {viewingReview.username}\n              </Link>\n              's review of \"\n              <Link href={\"/movie/\" + viewingReview.movieID}>\n                {viewingReview.movieTitle}\n              </Link>\n              \"\n            </h1>\n            <Divider />\n            {/* Rating component from MUI. When changed update the state to the correct value. Can only be edited if the user is in editing state */}\n            <Rating\n              name=\"rating\"\n              readOnly={!editing}\n              value={rating}\n              // Rating is set to 1 if it is set to null.\n              onChange={(_, value) => {\n                setRating(value === null ? 1 : value);\n              }}\n            />\n            {/* If user is editing, display textfield. Else display the text of the review from redux state */}\n            {editing ? (\n              <TextField\n                value={text}\n                // When changed, update the state of the component\n                onChange={(event) => {\n                  setText(event.target.value);\n                }}\n              />\n            ) : (\n              <p>{viewingReview.text}</p>\n            )}\n            {/* These buttons only show if the user is the writer of the review. */}\n            <div\n              id=\"reviewButtons\"\n              className={userIsWriter ? \"showing\" : \"hiding\"}\n            >\n              {/* This button only shows if the user is editing */}\n              <div className={editing ? \"showing\" : \"hiding\"}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<Check />}\n                  // When clicked, if text is blank alert user. Else dispatch updateReview action from redux with a valid review and the token of the user. Then turns of editing.\n                  onClick={() => {\n                    if (text === \"\") {\n                      window.alert(\"You must write something in your review\");\n                    } else {\n                      updateReview(\n                        {\n                          rating: rating,\n                          text: text,\n                          movieID: viewingReview.movieID,\n                        },\n                        viewingReview._id,\n                        props.userInfo.user.token\n                      );\n                      setEditing(false);\n                    }\n                  }}\n                >\n                  Update\n                </Button>\n              </div>\n              {/* Button used for flipping the editing state */}\n              <Button\n                className={classes.warningButton}\n                variant=\"contained\"\n                // When clicked, flips editing state and resets text and rating.\n                onClick={() => {\n                  setEditing(!editing);\n                  setRating(viewingReview.rating);\n                  setText(viewingReview.text);\n                }}\n                // Text and icon depends on if the user is editing or not.\n                startIcon={editing ? <Close /> : <Edit />}\n              >\n                {editing ? \"Cancel\" : \"Edit\"}\n              </Button>\n              <Button\n                variant=\"contained\"\n                className={classes.errorButton}\n                startIcon={<Delete />}\n                // When delete button is clicked, if the user confirms, dispatches deleteReview action with id and token. Redirects to homepage.\n                onClick={() => {\n                  if (window.confirm(\"Do you want to delete this review?\")) {\n                    deleteReview(viewingReview._id, props.userInfo.user.token);\n                    history.replace(\"/\");\n                  }\n                }}\n              >\n                Delete\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default connector(ReviewPage);\n","import React from \"react\";\nimport \"./style.css\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport { Filters } from \"../../redux/filter/filterTypes\";\nimport {\n  closeFilterDialog,\n  setFilters,\n} from \"../../redux/filter/filterActions\";\nimport { updateCurrentPage } from \"../../redux/search/searchActions\";\nimport { RootState } from \"../../interfaces/RootState\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    filterData: state.filter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    updateCurrentPage: (page: number) => dispatch(updateCurrentPage(page)),\n    setFilters: (filterObject: Filters) => dispatch(setFilters(filterObject)),\n    closeFilterDialog: () => dispatch(closeFilterDialog()),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\n// Declares a list of the genres we have. Is declared outside of the component as doesn't need to \"update\" when the component does.\nconst genres = [\n  \"Action\",\n  \"Adventure\",\n  \"Animation\",\n  \"Comedy\",\n  \"Crime\",\n  \"Documentary\",\n  \"Drama\",\n  \"Family\",\n  \"History\",\n  \"Horror\",\n  \"Music\",\n  \"Mystery\",\n  \"Romance\",\n  \"Science Fiction\",\n  \"TV Movie\",\n  \"Thriller\",\n  \"War\",\n  \"Western\",\n];\n\nconst FilterDialog: React.FunctionComponent<Props> = (props) => {\n  // Sets a list of strings in the state of the component. Initially set to be empty.\n  // Is to be used for holding of the selected genres to filter on.\n  const [selectedGenres, setSelectedGenres] = React.useState<Array<string>>(\n    props.filterData.filters.genre === undefined\n      ? []\n      : props.filterData.filters.genre\n  );\n\n  // Sets a list of ReactElemets in the state of the component. Initially set to be empty.\n  // Is to be used for holding the buttons for the genres to toggle.\n  const [genreButtons, setGenreButtons] = React.useState<React.ReactElement[]>(\n    []\n  );\n\n  // Sets an object in the state of the component. Initially set to greater than (gt) 0, less than (lt) infinity.\n  // Is to be used for holding the current value of the duration filtration and the creation of the filterObject.\n  const [durationObject, setDurationObject] = React.useState(\n    props.filterData.filters.duration === undefined\n      ? {\n          gt: 0,\n          lt: Infinity,\n        }\n      : props.filterData.filters.duration\n  );\n\n  // Sets an object in the state of the component. Initially set to greater than (gt) 0, less than (lt) infinity.\n  // Is to be used for holding the current value of the budget filtration and the creation of the filterObject.\n  const [budgetObject, setBudgetObject] = React.useState(\n    props.filterData.filters.budget === undefined\n      ? {\n          gt: 0,\n          lt: Infinity,\n        }\n      : props.filterData.filters.budget\n  );\n\n  // Function that is responsible for toggling a genre. Takes in genre as a string.\n  // Because of the useCallback hook, this function only updates what it does when a dependency from the dependency list updates and not every time the component updates.\n  const toggleGenre = React.useCallback(\n    (genre: string) => {\n      // If the genre already is selected, it filters it out from selected genres and stores it in newGenres.\n      // It then updates the state with the newGenres.\n      if (selectedGenres.includes(genre)) {\n        const newGenres = selectedGenres.filter((g) => g !== genre);\n        setSelectedGenres(newGenres);\n      } else {\n        // If not, create newGenres from selectedGenres and push the genre into it.\n        // Then sets the selected genres in the state to the elementts of newGenres\n        const newGenres = selectedGenres;\n        newGenres.push(genre);\n        setSelectedGenres([...newGenres]);\n      }\n    },\n    [selectedGenres]\n  );\n\n  // Function that creates buttons according to the genre and selectedGenres lists and stores them in the genreButtons state.\n  // Because of the useCallback hook, this function only updates what it does when a dependency from the dependency list updates and not every time the component updates.\n  const updateGenreButtons = React.useCallback(() => {\n    const newButtons: React.ReactElement[] = [];\n    // For every genre ...\n    genres.forEach((genre, i) => {\n      const button = (\n        // ... create a MUI Button component with variant according to if it is selected.\n        // When clicked, triggers toggleGenre with its genre as input.\n        <Button\n          key={i}\n          color=\"primary\"\n          variant={selectedGenres.includes(genre) ? \"contained\" : \"outlined\"}\n          onClick={() => toggleGenre(genre)}\n        >\n          {genre}\n        </Button>\n      );\n      // Then push it to the newButtons list ...\n      newButtons.push(button);\n    });\n    // ... and update the state with the new buttons\n    setGenreButtons(newButtons);\n  }, [selectedGenres, toggleGenre]);\n\n  // Function that creates a filter object according the the Filters interface from redux.\n  const createFilterObject = () => {\n    let filterObject: Filters = {};\n    // If any genres are selected, set the filterObjects genre field to the selectedGenres.\n    if (selectedGenres.length > 0) {\n      filterObject.genre = selectedGenres;\n    }\n    // If any duration fields are set, set the filterObjects duration field to the durationObject.\n    if (durationObject.gt > 0 || durationObject.lt < Infinity) {\n      filterObject.duration = durationObject;\n    }\n    // If any budget fields are set, set the filterObjects budget field to the budgetObject.\n    if (budgetObject.gt > 0 || budgetObject.lt < Infinity) {\n      filterObject.budget = budgetObject;\n    }\n    // Then return it\n    return filterObject;\n  };\n\n  // Function that triggers when the FilterDialog is to be closed.\n  // As the filters will be updated, and a new search is to be executed, the current page needs to be set to 1 as to not search on a page that doesn't exist.\n  // Sets the filters in the state to a new filterObject from createFilterObject.\n  // Closes the filterDialog with the closeFilterDialog action.\n  const handleClose = () => {\n    props.updateCurrentPage(1);\n    props.setFilters(createFilterObject());\n    props.closeFilterDialog();\n  };\n\n  // Runs updateGenres function when the component mounts and when the updateGenreButtons function updates.\n  React.useEffect(() => {\n    updateGenreButtons();\n  }, [updateGenreButtons]);\n\n  return (\n    // Dialog component from MUI. Open prop set to the open prop from the component (that comes from the redux state).\n    // When closed (clicking outside the dialog, runs handleClose)\n    <Dialog open={props.filterData.open} onClose={handleClose} id=\"filters\">\n      <DialogTitle>Filters</DialogTitle>\n      <DialogContent>\n        <DialogContentText>Genres</DialogContentText>\n        {/* Gets the genreButtons from the state of the component */}\n        <div className=\"genreButtons\">{genreButtons}</div>\n        <div>\n          <DialogContentText>Duration (minutes)</DialogContentText>\n        </div>\n        <div className=\"numberInputs\">\n          {/* TextField for the \"From\" part of duration. Minimum is set to 0.\n                    Displays blank if the value is 0, otherwise displays the gt value of the durationObject in the state.\n                    When changed, if its blank, set the gt value to 0 and the lt value to what it was. If not, set the gt to he new value. */}\n          <TextField\n            label=\"From\"\n            variant=\"filled\"\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                min: 0,\n              },\n            }}\n            value={durationObject.gt === 0 ? \"\" : durationObject.gt}\n            onChange={(event) => {\n              event.target.value === \"\"\n                ? setDurationObject({\n                    gt: 0,\n                    lt: durationObject.lt,\n                  })\n                : setDurationObject({\n                    gt: parseInt(event.target.value),\n                    lt: durationObject.lt,\n                  });\n            }}\n          ></TextField>\n          {/* TextField for the \"To\" part of duration. Minimum is set to 0.\n                    Displays blank if the value is infinity, otherwise displays the lt value of the durationObject in the state.\n                    When changed, if its blank, set the lt value to infinity and the gt value to what it was. If not, set the lt to he new value. */}\n          <TextField\n            label=\"To\"\n            variant=\"filled\"\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                min: 0,\n              },\n            }}\n            value={durationObject.lt === Infinity ? \"\" : durationObject.lt}\n            onChange={(event) => {\n              event.target.value === \"\"\n                ? setDurationObject({\n                    gt: durationObject.gt,\n                    lt: Infinity,\n                  })\n                : setDurationObject({\n                    gt: durationObject.gt,\n                    lt: parseInt(event.target.value),\n                  });\n            }}\n          ></TextField>\n        </div>\n        <div>\n          <DialogContentText>Budget (dollars)</DialogContentText>\n        </div>\n        <div className=\"numberInputs\">\n          {/* TextField for the \"From\" part of budget. Minimum is set to 0.\n                    Displays blank if the value is 0, otherwise displays the gt value of the budgetObject in the state.\n                    When changed, if its blank, set the gt value to 0 and the lt value to what it was. If not, set the gt to he new value. */}\n          <TextField\n            label=\"From\"\n            variant=\"filled\"\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                min: 0,\n              },\n            }}\n            value={budgetObject.gt === 0 ? \"\" : budgetObject.gt}\n            onChange={(event) => {\n              event.target.value === \"\"\n                ? setBudgetObject({\n                    gt: 0,\n                    lt: budgetObject.lt,\n                  })\n                : setBudgetObject({\n                    gt: parseInt(event.target.value),\n                    lt: budgetObject.lt,\n                  });\n            }}\n          ></TextField>\n          {/* TextField for the \"To\" part of budget. Minimum is set to 0.\n                    Displays blank if the value is infinity, otherwise displays the lt value of the budgetObject in the state.\n                    When changed, if its blank, set the lt value to infinity and the gt value to what it was. If not, set the lt to he new value. */}\n          <TextField\n            label=\"To\"\n            variant=\"filled\"\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                min: 0,\n              },\n            }}\n            value={budgetObject.lt === Infinity ? \"\" : budgetObject.lt}\n            onChange={(event) => {\n              event.target.value === \"\"\n                ? setBudgetObject({\n                    gt: budgetObject.gt,\n                    lt: Infinity,\n                  })\n                : setBudgetObject({\n                    gt: budgetObject.gt,\n                    lt: parseInt(event.target.value),\n                  });\n            }}\n          ></TextField>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        {/* Close button that runs handle close when clicked. */}\n        <Button onClick={handleClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default connector(FilterDialog);\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\nSome have payloads that correspond to the action.\n\n*/\n\nimport {\n  CLOSE_FILTER_DIALOG,\n  FilterActionTypes,\n  Filters,\n  OPEN_FILTER_DIALOG,\n  RESET_FILTERS,\n  SET_FILTERS,\n} from \"./filterTypes\";\n\nexport const setFilters = (filters: Filters): FilterActionTypes => {\n  return {\n    type: SET_FILTERS,\n    payload: filters,\n  };\n};\n\nexport const openFilterDialog = (): FilterActionTypes => {\n  return {\n    type: OPEN_FILTER_DIALOG,\n  };\n};\n\nexport const closeFilterDialog = (): FilterActionTypes => {\n  return {\n    type: CLOSE_FILTER_DIALOG,\n  };\n};\n\nexport const resetFilters = (): FilterActionTypes => {\n  return {\n    type: RESET_FILTERS,\n  };\n};\n","/*\n\nThis file creates the necessary types for filter actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported .\n\nAlso reates an interface for Filter state.\n\n*/\n\nexport const SET_FILTERS = \"SET_FILTERS\";\nexport const OPEN_FILTER_DIALOG = \"OPEN_FILTER_DIALOG\";\nexport const CLOSE_FILTER_DIALOG = \"CLOSE_FILTER_DIALOG\";\n\nexport const RESET_FILTERS = \"RESET_FILTERS\";\n\nexport interface Filters {\n  genre?: Array<string>;\n  duration?: {\n    gt: number;\n    lt: number;\n  };\n  budget?: {\n    gt: number;\n    lt: number;\n  };\n}\n\nexport interface Filter {\n  open: boolean;\n  filters: Filters;\n}\n\ninterface SetFiltersAction {\n  type: typeof SET_FILTERS;\n  payload: Filters;\n}\n\ninterface OpenFilterDialogAction {\n  type: typeof OPEN_FILTER_DIALOG;\n}\n\ninterface CloseFilterDialogAction {\n  type: typeof CLOSE_FILTER_DIALOG;\n}\n\ninterface ResetFiltersAction {\n  type: typeof RESET_FILTERS;\n}\n\nexport type FilterActionTypes =\n  | SetFiltersAction\n  | OpenFilterDialogAction\n  | CloseFilterDialogAction\n  | ResetFiltersAction;\n","import {\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport { ArrowDownward, ArrowUpward } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport {\n  setSortDirectionAscending,\n  setSortDirectionDescending,\n  setSortTypeBudget,\n  setSortTypeDuration,\n  setSortTypeTitle,\n} from \"../../redux/sort/sortActions\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    sortData: state.sort,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    setSortTypeTitle: () => dispatch(setSortTypeTitle()),\n    setSortTypeDuration: () => dispatch(setSortTypeDuration()),\n    setSortTypeBudget: () => dispatch(setSortTypeBudget()),\n    setSortDirectionAscending: () => dispatch(setSortDirectionAscending()),\n    setSortDirectionDescending: () => dispatch(setSortDirectionDescending()),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst SortSelect: React.FunctionComponent<Props> = (props) => {\n  // Extracts the descending attribute from the redux state.\n  const descending = props.sortData.descending;\n\n  // Function that triggers when the Select component changes value.\n  // Takes in an event where the value is unknown. This is because the support for TypeScript in MUI isn't perfect. It is always a string and therefore we cast the value as string.\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    // Gets the value from the event.\n    const value = event.target.value as string;\n    // Update the redux state according to the value.\n    if (value === \"title\") {\n      props.setSortTypeTitle();\n    } else if (value === \"duration\") {\n      props.setSortTypeDuration();\n    } else if (value === \"budget\") {\n      props.setSortTypeBudget();\n    }\n  };\n\n  return (\n    <>\n      {/* Uses FormControl from MUI for the cool label effect */}\n      <FormControl fullWidth variant=\"outlined\">\n        <InputLabel>Sort by:</InputLabel>\n        {/* Select component from MUI. Default value set to title. When changed, trigger handleChange */}\n        <Select\n          className=\"select\"\n          variant=\"outlined\"\n          defaultValue={props.sortData.type}\n          label=\"Sort by:\"\n          onChange={handleChange}\n        >\n          {/* MenuItems from MUI for the sort types. */}\n          <MenuItem value=\"title\">Title</MenuItem>\n          <MenuItem value=\"duration\">Duration</MenuItem>\n          <MenuItem value=\"budget\">Budget</MenuItem>\n        </Select>\n      </FormControl>\n      {/* MUI IconButton for sort direction. Updates the redux state to the correct value. */}\n      <IconButton\n        className=\"iconButton\"\n        onClick={() => {\n          descending\n            ? props.setSortDirectionAscending()\n            : props.setSortDirectionDescending();\n        }}\n      >\n        {/* Shows the correct arrow according to the sort direction. */}\n        {descending ? <ArrowDownward /> : <ArrowUpward />}\n      </IconButton>\n    </>\n  );\n};\n\nexport default connector(SortSelect);\n","/*\n\nThis file exports action creators for the different types. Used to trigger actions in the redux store.\n\n*/\n\nimport {\n    SET_SORT_DIRECTION_ASCENDING,\n    SET_SORT_DIRECTION_DESCENDING,\n    SET_SORT_TYPE_BUDGET,\n    SET_SORT_TYPE_DURATION,\n    SET_SORT_TYPE_TITLE,\n    SortActionTypes,\n} from \"./sortTypes\";\n\nexport const setSortTypeTitle = (): SortActionTypes => {\n    return {\n        type: SET_SORT_TYPE_TITLE,\n    };\n};\n\nexport const setSortTypeDuration = (): SortActionTypes => {\n    return {\n        type: SET_SORT_TYPE_DURATION,\n    };\n};\n\nexport const setSortTypeBudget = (): SortActionTypes => {\n    return {\n        type: SET_SORT_TYPE_BUDGET,\n    };\n};\n\nexport const setSortDirectionAscending = (): SortActionTypes => {\n    return {\n        type: SET_SORT_DIRECTION_ASCENDING,\n    };\n};\n\nexport const setSortDirectionDescending = (): SortActionTypes => {\n    return {\n        type: SET_SORT_DIRECTION_DESCENDING,\n    };\n};\n","/*\n\nThis file creates the necessary types for sort actions. \nIt also creates interfaces for the different actions and combines them to a single ActionTypes type which is exported .\n\nAlso reates an interface for Sort state.\n\n*/\n\nexport const SET_SORT_TYPE_TITLE = \"SET_SORT_TYPE_TITLE\";\nexport const SET_SORT_TYPE_DURATION = \"SET_SORT_TYPE_DURATION\";\nexport const SET_SORT_TYPE_BUDGET = \"SET_SORT_TYPE_BUDGET\";\nexport const SET_SORT_DIRECTION_ASCENDING = \"SET_SORT_DIRECTION_ASCENDING\";\nexport const SET_SORT_DIRECTION_DESCENDING = \"SET_SORT_DIRECTION_DESCENDING\";\n\ninterface SetSortTypeTitleAction {\n    type: typeof SET_SORT_TYPE_TITLE;\n}\n\ninterface SetSortTypeDurationAction {\n    type: typeof SET_SORT_TYPE_DURATION;\n}\n\ninterface SetSortTypeBudgetAction {\n    type: typeof SET_SORT_TYPE_BUDGET;\n}\n\ninterface SetSortDirectionAscendingAction {\n    type: typeof SET_SORT_DIRECTION_ASCENDING;\n}\n\ninterface SetSortDirectionDescendingAction {\n    type: typeof SET_SORT_DIRECTION_DESCENDING;\n}\n\nexport interface Sort {\n    type: \"title\" | \"duration\" | \"budget\";\n    descending: boolean;\n}\n\nexport type SortActionTypes =\n    | SetSortTypeTitleAction\n    | SetSortTypeDurationAction\n    | SetSortTypeBudgetAction\n    | SetSortDirectionAscendingAction\n    | SetSortDirectionDescendingAction;\n","import React from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport \"./style.css\";\nimport { updateSearchQuery } from \"../../redux/search/searchActions\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport FilterDialog from \"../FilterDialog\";\nimport { openFilterDialog } from \"../../redux/filter/filterActions\";\nimport SortSelect from \"../SortSelect\";\nimport { RootState } from \"../../interfaces/RootState\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    searchData: state.search,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    updateSearchQuery: (query: string) => dispatch(updateSearchQuery(query)),\n    openFilterDialog: () => dispatch(openFilterDialog()),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst SearchBar: React.FunctionComponent<Props> = (props) => {\n  // Sets a timer in the state of the component. Initially set to do nothing after 0 seconds.\n  // This is going to trigger a search when the user stops typing in the searchbar.\n  const [timer, setTimer] = React.useState(setTimeout(() => {}, 0));\n\n  // Sets a value in the state of the component. Initially set to an empty string.\n  // This is the current value of the text field in the searchbar\n  const [value, setValue] = React.useState(props.searchData.query);\n\n  // Extracts the redux action updateSearchQuery from the props of the component.\n  const updateSearchQuery = props.updateSearchQuery;\n\n  // This function triggers every time the textfield is updated.\n  // It clears the current timer, so that the function it was set to perform after an amount of time gets cancelled.\n  // Then it updates the state value with the new value in the textfield.\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    clearTimeout(timer);\n    setValue(event.target.value);\n  };\n\n  // This function triggers when the user presses a key on their keyboard while the textfield is selected.\n  // Only does something when that key is \"Enter\".\n  // It clears the current timer, so that the function it was set to perform after an amount of time gets cancelled.\n  // The it calls the function triggerChange.\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      clearTimeout(timer);\n      triggerChange();\n    }\n  };\n\n  // This function triggers when the search button is clicked.\n  // It clears the current timer, so that the function it was set to perform after an amount of time gets cancelled.\n  // The it calls the function triggerChange\n  const handleClick = () => {\n    clearTimeout(timer);\n    triggerChange();\n  };\n\n  // This function takes the current value in the state and calls the updateSearchQuery function with it as input.\n  // Because of the useCallback hook, this function only updates what it does when a dependency from the dependency list updates and not every time the component updates.\n  const triggerChange = React.useCallback(() => {\n    const query = value;\n    updateSearchQuery(query);\n  }, [value, updateSearchQuery]);\n\n  // From the react.js docs: \"useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\"\n  // Found it easier and cleaner to do this than having it in the state.\n  // Is to be used to not set a timer when the component first mounts.\n  const firstUpdate = React.useRef(true);\n\n  // useEffect hook triggers when the component has mounted and when any of the dependencies from the dependency list updates\n  // Does nothing on the first mount.\n  // When the value changes, sets a timer to trigger triggerChange after 1 sec.\n  React.useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    setTimer(setTimeout(triggerChange, 1000));\n  }, [value, triggerChange]);\n\n  return (\n    <div id=\"searchBar\">\n      <div id=\"sortSelect\">\n        <SortSelect />\n      </div>\n      <div id=\"textField\">\n        {/* TextField component from MUI. value is set to the components value state. Triggers handle change on change and handleKeyDown on key presses */}\n        <TextField\n          id=\"textField\"\n          label=\"Title\"\n          color=\"secondary\"\n          variant=\"filled\"\n          value={value}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          fullWidth\n        />\n      </div>\n      <div id=\"searchBarButtonsContainer\">\n        {/* Button component from MUI. Is for filters. When clicked runs openFilterDialog function from props. */}\n        <Button\n          className=\"searchBarButton\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={props.openFilterDialog}\n        >\n          Filters\n        </Button>\n        <FilterDialog />\n        {/* Button component from MUI. Is for search. When clicked runs handleClick */}\n        <Button\n          className=\"searchBarButton\"\n          onClick={handleClick}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default connector(SearchBar);\n","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Takes in id, title and posterPath as props from parent.\ntype Props = {\n  id: string;\n  title: string;\n  posterPath: string;\n};\n\nconst MovieContainer: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  return (\n    // Returns a Box (MUI) with an image and title according to the props it got from the SearchResults component.\n    // When clicked, triggers openMovieDialog action with the current id from redux state.\n    <Box\n      // Changes the history when clicked\n      onClick={() => history.push(\"movie/\" + props.id)}\n      className=\"result\"\n      bgcolor=\"secondary.light\"\n      boxShadow={3}\n      color=\"text.secondary\"\n      data-testid=\"boxen\"\n    >\n      <img\n        className=\"resultImg\"\n        src={props.posterPath}\n        alt={props.title + \" poster\"}\n      />\n      <p className=\"title\">{props.title}</p>\n    </Box>\n  );\n};\n\nexport default MovieContainer;\n","import React from \"react\";\nimport { AnyAction } from \"redux\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { fetchResults } from \"../../redux/search/searchActions\";\nimport MovieContainer from \"../MovieContainer\";\nimport \"./style.css\";\nimport { ParamsInterface } from \"../../interfaces/ParamsInterface\";\nimport { RootState } from \"../../interfaces/RootState\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    searchData: state.search,\n    filterData: state.filter,\n    sortData: state.sort,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    fetchResults: (params: ParamsInterface) => dispatch(fetchResults(params)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst SearchResults: React.FunctionComponent<Props> = (props) => {\n  // Extract properties and action from the redux state.\n  const sort = props.sortData;\n  const filters = props.filterData.filters;\n  const currentPage = props.searchData.currentPage;\n  const query = props.searchData.query;\n  const fetchResults = props.fetchResults;\n\n  // Function for creating a config object according to the ParamsInterface.\n  // Because of the useCallback hook, this function only updates what it does when a dependency from the dependency list updates and not every time the component updates.\n  const createConfig = React.useCallback(() => {\n    let paramsObject: ParamsInterface = {\n      q: query,\n      page: currentPage,\n      genre: filters.genre,\n      duration: filters.duration,\n      budget: filters.budget,\n      sort: {\n        type: sort.type,\n        descending: sort.descending,\n      },\n    };\n    return paramsObject;\n  }, [query, currentPage, filters, sort]);\n\n  // useEffect hook triggers when the component mounts and when any of the dependencies from the dependencies\n  // Fetches results based on the current config file.\n  React.useEffect(() => {\n    fetchResults(createConfig());\n  }, [query, currentPage, filters, sort, fetchResults, createConfig]);\n\n  // Function that returns jsx based on the current redux state\n  const getResults = () => {\n    // If loading, return loading\n    if (props.searchData.loading) {\n      return <p>Loading</p>;\n    } else if (props.searchData.error) {\n      // If error, return error\n      return <p>{props.searchData.error}</p>;\n    } else if (props.searchData.results) {\n      // If results exist ...\n      // ... and length is zero, return query gave no results.\n      if (props.searchData.results.length === 0) {\n        return <p>Your query gave no results</p>;\n      } else {\n        // ... and length is larger than zero, map each element in results to a ResultContainer with corresponding props.\n        return props.searchData.results.map((result) => (\n          <MovieContainer\n            key={result._id}\n            id={result._id}\n            title={result.title}\n            posterPath={result.poster_path}\n          />\n        ));\n      }\n    }\n  };\n\n  // Returns the result from getResults.\n  return <div id=\"results\">{getResults()}</div>;\n};\n\nexport default connector(SearchResults);\n","import { Button, makeStyles } from \"@material-ui/core\";\nimport { Delete, ExitToApp } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport {\n  deleteUser,\n  fetchUser,\n  userLogout,\n} from \"../../redux/user/userActions\";\nimport BackButton from \"../BackButton\";\nimport ReviewContainer from \"../ReviewContainer\";\nimport \"./style.css\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    fetchUser: (userID: string) => dispatch(fetchUser(userID)),\n    userLogout: () => dispatch(userLogout()),\n    deleteUser: (id: string, token: string) => dispatch(deleteUser(id, token)),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\n// Use makeStyles from MUI to overwrite the styling of MUI components\nconst useStyles = makeStyles((theme) => ({\n  warningButton: {\n    backgroundColor: theme.palette.warning.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.warning.dark,\n    },\n  },\n  errorButton: {\n    backgroundColor: theme.palette.error.main,\n    \"&:hover\": {\n      backgroundColor: theme.palette.error.dark,\n    },\n  },\n}));\n\nconst UserPage: React.FunctionComponent<Props> = (props) => {\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  // Make the classes from useStyles.\n  const classes = useStyles();\n\n  // The useParams() hook returns an object of key/value pairs of URL parameters.\n  const { userID } = useParams<{ userID: string }>();\n\n  // Declares a boolean dependent if the user that is currently being viewed is the users user.\n  const myUser = userID === props.userInfo.user.userID;\n\n  // Extracts relevant state and functions from redux props\n  const viewingUser = props.userInfo.viewingUser;\n  const fetchUser = props.fetchUser;\n\n  // The React.useEffect() hook runs whenever the component mounts or one of the dependencies in the dependency list changes\n  // Dispatches redux action fetchUser when the userID from url changes\n  React.useEffect(() => {\n    fetchUser(userID);\n  }, [userID, fetchUser]);\n\n  return (\n    <>\n      <BackButton />\n      <h1>\n        {/* Title is dependent on myUser */}\n        {myUser\n          ? \"Your user info:\"\n          : \"User info of user \" + viewingUser.username + \":\"}\n      </h1>\n      <p>Username: {viewingUser.username}</p>\n      <p>User ID: {viewingUser.userID}</p>\n      {/* If it is my user, display these buttons */}\n      <div id=\"userButtons\" className={myUser ? \"showing\" : \"hiding\"}>\n        <Button\n          className={classes.warningButton}\n          variant=\"contained\"\n          startIcon={<ExitToApp />}\n          // When clicked, dispatches redux logout action and redirects to startpage\n          onClick={() => {\n            props.userLogout();\n            history.replace(\"/\");\n          }}\n        >\n          Logout\n        </Button>\n        <Button\n          className={classes.errorButton}\n          variant=\"contained\"\n          startIcon={<Delete />}\n          // When clicked, warns the user of the delete action. If confirmed, dispatch deleteUser action with userID and token\n          onClick={() => {\n            if (window.confirm(\"Do you want to delete your user?\")) {\n              props.deleteUser(\n                props.userInfo.user.userID,\n                props.userInfo.user.token\n              );\n              history.replace(\"/\");\n            }\n          }}\n        >\n          Delete\n        </Button>\n      </div>\n      {/* Displayes the reviews of the user being viewed */}\n      <h2>{myUser ? \"Your reviews\" : \"Reviews of \" + viewingUser.username}</h2>\n      <ReviewContainer type=\"user\" />\n    </>\n  );\n};\n\nexport default connector(UserPage);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport LoginRegisterContainer from \"../LoginRegisterContainer\";\nimport MoviePage from \"../MoviePage\";\nimport PageContainer from \"../PageContainer\";\nimport ReviewPage from \"../ReviewPage\";\nimport SearchBar from \"../SearchBar\";\nimport SearchResults from \"../SearchResults\";\nimport UserPage from \"../UserPage\";\nimport \"./style.css\";\n\nconst SwitchContainer: React.FunctionComponent = () => {\n  // Returns a div with content dependent on the current url. Some paths have variables declared with :\n  return (\n    <div id=\"switchContainer\">\n      {/* Switch and Route component from react-router-dom. Responsible for rendering correct components */}\n      <Switch>\n        <Route exact path=\"/\">\n          <div id=\"searchContainer\">\n            <SearchBar />\n            <PageContainer />\n            <SearchResults />\n            <PageContainer />\n          </div>\n        </Route>\n        <Route path=\"/movie/:movieID\">\n          <MoviePage />\n        </Route>\n        <Route path=\"/user/:userID\">\n          <UserPage />\n        </Route>\n        <Route path=\"/review/:reviewID\">\n          <ReviewPage />\n        </Route>\n        <Route path=\"/login\">\n          <LoginRegisterContainer type=\"login\" />\n        </Route>\n        <Route path=\"/register\">\n          <LoginRegisterContainer type=\"register\" />\n        </Route>\n        <Route>\n          <h1>404</h1>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default SwitchContainer;\n","import { Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { RootState } from \"../../interfaces/RootState\";\nimport { closeAlert } from \"../../redux/alert/alertActions\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    alertInfo: state.alertInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    closeAlert: () => dispatch(closeAlert()),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst CustomSnackbar: React.FunctionComponent<Props> = (props) => {\n  return (\n    // The snackbar is located at the bottom to the right.\n    <Snackbar\n      // redux state determines if the snacbar is open.\n      open={props.alertInfo.open}\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n      // It runs the onClose automatically after 5000 ms\n      autoHideDuration={5000}\n      // onClose runs the closeAlert action from redux\n      onClose={() => {\n        props.closeAlert();\n      }}\n    >\n      <Alert\n        variant=\"filled\"\n        // onClose runs the closeAlert action from redux\n        onClose={() => {\n          props.closeAlert();\n        }}\n        // Gets severity and message from redux props\n        severity={props.alertInfo.alert.type}\n      >\n        {props.alertInfo.alert.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default connector(CustomSnackbar);\n","import React from \"react\";\nimport {\n  AppBar,\n  Box,\n  createMuiTheme,\n  IconButton,\n  makeStyles,\n  MuiThemeProvider,\n  Toolbar,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport { Brightness5, Brightness7 } from \"@material-ui/icons\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { useHistory } from \"react-router-dom\";\nimport SwitchContainer from \"./components/SwitchContainer\";\nimport { RootState } from \"./interfaces/RootState\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport CustomSnackbar from \"./components/CustomSnackbar\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { resetSearch } from \"./redux/search/searchActions\";\nimport { resetFilters } from \"./redux/filter/filterActions\";\n\n/* \n\nThis first part of the code is all regarding to redux. This is because this component needs to access the redux state.\nThe following code follows the conventions that redux suggests. You can read more about it here: https://redux.js.org/recipes/usage-with-typescript\n\nThe first thing to do is declare an interface (RootState) that fits the redux store. It is only necessary to declare the parts of the store that the component needs.\nThe function mapStateToProps is responsible for mapping the redux state to the components props. This uses the RootState interface to get the parts that we need from the state.\n\nThe function mapDispatchToProps is responsible for mapping the redux actions to the components props. We only map the actions that this component needs and uses.\n\nThen we declare the connector with the connect function with the mapStateToProps and mapDispatchToProps as input.\nThis is to easily Use the ConnectedProps<T> to infer the types of the props from connect automatically.\n\nThen we declare the type of the final Props that the component will use. We write it like this so that it is easy to add props if the component needs it.\n\nFinally the component takes in props of the type Props.\n\nWhen the component is exported (at the bottom), the component gets connected to the redux store with the connector we declared.\n\n*/\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    userInfo: state.userInfo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n  return {\n    resetSearch: () => dispatch(resetSearch()),\n    resetFilters: () => dispatch(resetFilters()),\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux;\n\nconst App: React.FunctionComponent<Props> = (props) => {\n  // State to hold the value for darkmade. Set to true by default.\n  const [darkMode, setDarkMode] = React.useState(true);\n\n  const primaryColors = {\n    main: \"#7cec9f\",\n    light: \"#b0ffd0\",\n    dark: \"#47b970\",\n  };\n\n  // Creates the lightTheme for our website with primary and secondary colors. Part of Material UI.\n  const lightTheme = createMuiTheme({\n    palette: {\n      primary: primaryColors,\n      secondary: {\n        main: \"#e8e8e8\",\n        light: \"#ffffff\",\n        dark: \"#b6b6b6\",\n      },\n      success: primaryColors,\n      type: \"light\",\n    },\n  });\n\n  // Creates the lightTheme for our website with primary and secondary colors. Part of Material UI.\n  const darkTheme = createMuiTheme({\n    palette: {\n      primary: primaryColors,\n      secondary: {\n        main: \"#212121\",\n        light: \"#484848\",\n        dark: \"#000000\",\n      },\n      success: primaryColors,\n      type: \"dark\",\n    },\n  });\n  // Primary colors are the same in both darkTheme and lightTheme.\n\n  // useMemo recomputes the current theme when one of the dependencies changes.\n  // lightTheme and darkTheme never changes.\n  // Only when the state darkMode changes, the theme will be recomputed based on that value.\n  // If true, use darkmode. Else use lightMode\n  const theme = React.useMemo(() => (darkMode ? darkTheme : lightTheme), [\n    darkMode,\n    darkTheme,\n    lightTheme,\n  ]);\n\n  // Use makeStyles from MUI to overwrite the styling of MUI components\n  // Will only be used on the appBar component, but written for possibility for expansion.\n  const useStyles = makeStyles(() => ({\n    // Want the appBars bgColor to be the light version of the current theme.\n    appBar: { backgroundColor: theme.palette.secondary.light },\n  }));\n\n  // Make the classes from useStyles.\n  const classes = useStyles();\n\n  // The useHistory hook gives access to the history instance used for navigation.\n  const history = useHistory();\n\n  return (\n    //  Wraps the entire application in the MUI theme provider so that every component can access the current theme.\n    <MuiThemeProvider theme={theme}>\n      {/* Box works as a div, but has the possibility to dynamically change bg and text color based on the current theme. Imported from MUI */}\n      <Box className=\"App\" bgcolor=\"secondary.main\" color=\"text.secondary\">\n        {/* AppBar is imported from MUI. Fixed to the top of the screen. \n                    Makes use of the class \"appBar\" created with makeStyles. This overwrites the standard bgColor.*/}\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          {/* AppBar should always be used with the Toolbar component from MUI */}\n          <Toolbar>\n            {/* the logo of the website */}\n            <img\n              id=\"logo\"\n              src=\"./resources/images/logo.png\"\n              alt=\"logo\"\n              onClick={() => {\n                history.replace(\"/\");\n                props.resetSearch();\n                props.resetFilters();\n              }}\n            />\n            {/* div that occupies remaining space of the Toolbar\n                            This is to space the IconButton to the right side of the toolbar */}\n            <div className={\"grow\"} />\n            {/* IconButton from MUI. When clicked, flips the darkMode state.\n                            Current icon is based on the darkMode state */}\n            <IconButton onClick={() => setDarkMode(!darkMode)}>\n              {darkMode ? <Brightness5 /> : <Brightness7 />}\n            </IconButton>\n            <IconButton\n              onClick={() => {\n                props.userInfo.loggedIn\n                  ? history.push(\"/user/\" + props.userInfo.user.userID)\n                  : history.push(\"/login\");\n              }}\n            >\n              <AccountCircleIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <SwitchContainer />\n      </Box>\n      <CustomSnackbar />\n      <Box\n        id=\"footer\"\n        bgcolor=\"secondary.light\"\n        color=\"text.secondary\"\n        boxShadow={3}\n      >\n        <div id=\"footerContent\">\n          <span>Made with love {\"<3\"}</span>\n        </div>\n      </Box>\n    </MuiThemeProvider>\n  );\n};\n\nexport default connector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  FETCH_RESULTS_FAILURE,\n  FETCH_RESULTS_REQUEST,\n  FETCH_RESULTS_SUCCESS,\n  UPDATE_SEARCH_QUERY,\n  Search,\n  SearchActionTypes,\n  UPDATE_CURRENT_PAGE,\n  UPDATE_TOTAL_PAGES,\n  RESET_SEARCH,\n} from \"./searchTypes\";\n\n// Uses Search interface for state.\n// The initial state of the reducer is set to:\nconst initialState: Search = {\n  loading: false,\n  results: [],\n  error: \"\",\n  query: \"\",\n  totalPages: 1,\n  currentPage: 1,\n};\n\n// Reducer takes in state and action and returns a state in the form of the Search interface.\nconst searchReducer = (\n  state = initialState,\n  action: SearchActionTypes\n): Search => {\n  // Switch an the type of action it takes in.\n  // The different cases are quite self-explanetory\n  switch (action.type) {\n    case FETCH_RESULTS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_RESULTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        results: action.payload,\n        error: \"\",\n      };\n    case FETCH_RESULTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        results: [],\n        error: action.payload,\n      };\n    case UPDATE_SEARCH_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n        currentPage: 1,\n      };\n    case UPDATE_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload,\n      };\n    case UPDATE_TOTAL_PAGES:\n      return {\n        ...state,\n        totalPages: action.payload,\n      };\n    case RESET_SEARCH:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import {\n  CLOSE_FILTER_DIALOG,\n  Filter,\n  FilterActionTypes,\n  OPEN_FILTER_DIALOG,\n  RESET_FILTERS,\n  SET_FILTERS,\n} from \"./filterTypes\";\n\n// Uses Filter interface for state.\n// The initial state of the reducer is set to:\nconst initialState: Filter = {\n  open: false,\n  filters: {},\n};\n\n// Reducer takes in state and action and returns a state in the form of the Filter interface.\nconst filterReducer = (\n  state = initialState,\n  action: FilterActionTypes\n): Filter => {\n  // Switch an the type of action it takes in.\n  // The different cases are quite self-explanetory\n  switch (action.type) {\n    case SET_FILTERS:\n      return {\n        ...state,\n        filters: action.payload,\n      };\n    case OPEN_FILTER_DIALOG:\n      return {\n        ...state,\n        open: true,\n      };\n    case CLOSE_FILTER_DIALOG:\n      return {\n        ...state,\n        open: false,\n      };\n    case RESET_FILTERS:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import {\n    SET_SORT_DIRECTION_ASCENDING,\n    SET_SORT_DIRECTION_DESCENDING,\n    SET_SORT_TYPE_BUDGET,\n    SET_SORT_TYPE_DURATION,\n    SET_SORT_TYPE_TITLE,\n    Sort,\n    SortActionTypes,\n} from \"./sortTypes\";\n\n// Uses Sort interface for state.\n// The initial state of the reducer is set to:\nconst initialState: Sort = {\n    type: \"title\",\n    descending: true,\n};\n\n// Reducer takes in state and action and returns a state in the form of the Sort interface.\nconst sortReducer = (state = initialState, action: SortActionTypes): Sort => {\n    // Switch an the type of action it takes in.\n    // The different cases are quite self-explanetory\n    switch (action.type) {\n        case SET_SORT_TYPE_TITLE:\n            return {\n                ...state,\n                type: \"title\",\n            };\n        case SET_SORT_TYPE_DURATION:\n            return {\n                ...state,\n                type: \"duration\",\n            };\n        case SET_SORT_TYPE_BUDGET:\n            return {\n                ...state,\n                type: \"budget\",\n            };\n        case SET_SORT_DIRECTION_ASCENDING:\n            return {\n                ...state,\n                descending: false,\n            };\n        case SET_SORT_DIRECTION_DESCENDING:\n            return {\n                ...state,\n                descending: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default sortReducer;\n","import {\n  FETCH_MOVIE_REQUEST,\n  FETCH_MOVIE_SUCCESS,\n  FETCH_MOVIE_FAILURE,\n  MovieInfo,\n  MovieActionTypes,\n} from \"./movieTypes\";\n\n// Uses MovieInfo interface for state.\n// The initial state of the reducer is set to:\nconst initialState: MovieInfo = {\n  loading: false,\n  error: \"\",\n  movie: {\n    genre: [],\n    reviews: [],\n    _id: \"\",\n    title: \"\",\n    poster_path: \"\",\n    desc: \"\",\n    budget: -1,\n    release_date: \"\",\n    duration: -1,\n    averageRating: -1,\n  },\n};\n\n// Reducer takes in state and action and returns a state in the form of the MovieInfo interface.\nconst movieReducer = (\n  state = initialState,\n  action: MovieActionTypes\n): MovieInfo => {\n  // Switch an the type of action it takes in.\n  // The different cases are quite self-explanetory\n  switch (action.type) {\n    case FETCH_MOVIE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_MOVIE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        movie: action.payload,\n        error: \"\",\n      };\n    case FETCH_MOVIE_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        movie: initialState.movie,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default movieReducer;\n","import {\n  DELETE_USER_FAILURE,\n  DELETE_USER_REQUEST,\n  DELETE_USER_SUCCESS,\n  FETCH_USER_FAILURE,\n  FETCH_USER_REQUEST,\n  FETCH_USER_SUCCESS,\n  UserActionTypes,\n  UserInfo,\n  USER_LOGIN_FAILURE,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAILURE,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n} from \"./userTypes\";\n\nconst getStateFromCookies = (): UserInfo => {\n  let userInStorage = localStorage.getItem(\"currentUser\");\n  if (userInStorage !== null) {\n    const currentTime = new Date();\n    if (JSON.parse(userInStorage).expires < currentTime.getTime()) {\n      localStorage.removeItem(\"currentUser\");\n      userInStorage = null;\n    }\n  }\n  if (userInStorage !== null) {\n    return {\n      loggedIn: true,\n      loading: false,\n      error: \"\",\n      user: JSON.parse(userInStorage),\n      viewingUser: {\n        username: \"\",\n        userID: \"\",\n        reviews: [],\n      },\n    };\n  } else {\n    return {\n      loggedIn: false,\n      loading: false,\n      error: \"\",\n      user: {\n        username: \"\",\n        userID: \"\",\n        token: \"\",\n        expires: 0,\n      },\n      viewingUser: {\n        username: \"\",\n        userID: \"\",\n        reviews: [],\n      },\n    };\n  }\n};\n\nconst initialState: UserInfo = getStateFromCookies();\n\nconst userReducer = (\n  state = initialState,\n  action: UserActionTypes\n): UserInfo => {\n  switch (action.type) {\n    case USER_LOGIN_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case USER_LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggedIn: true,\n        loading: false,\n        user: action.payload,\n        error: \"\",\n      };\n    case USER_LOGIN_FAILURE:\n      return {\n        ...state,\n        loggedIn: false,\n        loading: false,\n        user: initialState.user,\n        error: action.payload,\n      };\n    case USER_REGISTER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case USER_REGISTER_SUCCESS:\n      return {\n        ...state,\n        loggedIn: true,\n        loading: false,\n        user: action.payload,\n        error: \"\",\n      };\n    case USER_REGISTER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        user: initialState.user,\n        error: action.payload,\n      };\n    case FETCH_USER_REQUEST:\n      return {\n        ...state,\n      };\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        viewingUser: action.payload,\n      };\n    case FETCH_USER_FAILURE:\n      return {\n        ...state,\n      };\n    case DELETE_USER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        loggedIn: false,\n        loading: false,\n        error: \"\",\n        user: {\n          username: \"\",\n          userID: \"\",\n          token: \"\",\n          expires: 0,\n        },\n      };\n    case DELETE_USER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case USER_LOGOUT:\n      localStorage.removeItem(\"currentUser\");\n      return {\n        ...state,\n        loggedIn: false,\n        loading: false,\n        error: \"\",\n        user: {\n          username: \"\",\n          userID: \"\",\n          token: \"\",\n          expires: 0,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import {\n  DELETE_REVIEW_FAILURE,\n  DELETE_REVIEW_REQUEST,\n  DELETE_REVIEW_SUCCESS,\n  FETCH_REVIEWS_FAILURE,\n  FETCH_REVIEWS_REQUEST,\n  FETCH_REVIEWS_SUCCESS,\n  FETCH_REVIEW_FAILURE,\n  FETCH_REVIEW_REQUEST,\n  FETCH_REVIEW_SUCCESS,\n  POST_REVIEW_FAILURE,\n  POST_REVIEW_REQUEST,\n  POST_REVIEW_SUCCESS,\n  ReviewActionTypes,\n  ReviewInfo,\n  UPDATE_REVIEW_FAILURE,\n  UPDATE_REVIEW_REQUEST,\n  UPDATE_REVIEW_SUCCESS,\n} from \"./reviewTypes\";\n\n// Uses ReviewInfo interface for state.\n// The initial state of the reducer is set to:\nconst initialState: ReviewInfo = {\n  loading: false,\n  error: \"\",\n  reviews: [],\n  viewingReview: {\n    _id: \"\",\n    rating: -1,\n    text: \"\",\n    movieID: \"\",\n    userID: \"\",\n    username: \"\",\n    movieTitle: \"\",\n  },\n};\n\n// Reducer takes in state and action and returns a state in the form of the ReviewInfo interface.\nconst reviewReducer = (\n  state = initialState,\n  action: ReviewActionTypes\n): ReviewInfo => {\n  // Switch an the type of action it takes in.\n  // The different cases are quite self-explanetory\n  switch (action.type) {\n    case POST_REVIEW_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case POST_REVIEW_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n      };\n    case POST_REVIEW_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n\n    case UPDATE_REVIEW_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case UPDATE_REVIEW_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n      };\n    case UPDATE_REVIEW_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n\n    case DELETE_REVIEW_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case DELETE_REVIEW_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n      };\n    case DELETE_REVIEW_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n\n    case FETCH_REVIEWS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_REVIEWS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n        reviews: action.payload,\n      };\n    case FETCH_REVIEWS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n\n    case FETCH_REVIEW_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_REVIEW_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n        viewingReview: action.payload,\n      };\n    case FETCH_REVIEW_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reviewReducer;\n","import {\n  AlertActionTypes,\n  AlertInfo,\n  CLOSE_ALERT,\n  SET_ALERT,\n} from \"./alertTypes\";\n\n// Uses AlertInfo interface for state.\n// The initial state of the reducer is set to:\nconst initialState: AlertInfo = {\n  open: false,\n  alert: {\n    type: \"success\",\n    message: \"\",\n  },\n};\n\n// Reducer takes in state and action and returns a state in the form of the AlertInfo interface.\nconst alertReducer = (\n  state = initialState,\n  action: AlertActionTypes\n): AlertInfo => {\n  // Switch an the type of action it takes in.\n  // The different cases are quite self-explanetory\n  switch (action.type) {\n    case SET_ALERT:\n      return {\n        open: true,\n        alert: action.payload,\n      };\n    case CLOSE_ALERT:\n      return {\n        ...state,\n        open: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default alertReducer;\n","import { combineReducers } from \"redux\";\nimport searchReducer from \"./search/searchReducer\";\nimport filterReducer from \"./filter/filterReducer\";\nimport sortReducer from \"./sort/sortReducer\";\nimport movieReducer from \"./movie/movieReducer\";\nimport userReducer from \"./user/userReducer\";\nimport reviewReducer from \"./review/reviewReducer\";\nimport alertReducer from \"./alert/alertReducer\";\n\n// Creates a root reducer from all the reducers.\nconst rootReducer = combineReducers({\n  search: searchReducer,\n  filter: filterReducer,\n  sort: sortReducer,\n  movieInfo: movieReducer,\n  userInfo: userReducer,\n  reviewInfo: reviewReducer,\n  alertInfo: alertReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\n\n// Creates a redux store from the rootReducer and applies devTools and thunk middleware\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n// Strict mode is turned off in the finalized project as it had one issue with material UI, specifically the Dialogs components.\n// We researched this quite thoroughly and realized this has in practice no effect on the quality on the project.\n// We have developed our application with strict mode on the help us evade bad practices and errors.\n\nReactDOM.render(\n  // Wraps the entire application in the react-redux provider so that every component can access the store.\n  // Provider is initialized with the redux store from the redux folder.\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}